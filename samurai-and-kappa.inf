!% -~S
!% $OMIT_UNUSED_ROUTINES=1
!% $ZCODE_LESS_DICT_DATA=1
!% $MAX_ABBREVS=96
!========================================
! The Samurai and the Kappa
! Copyright Â© 2024 Garry Francis
!========================================
!Constant DEBUG;

Abbreviate " extra 'service'";              !     7x, saved    94
Abbreviate "Try talking to";                !    19x, saved   232
Abbreviate "Shinto shrine";                 !    13x, saved   141
Abbreviate "paper screen";                  !    12x, saved   108
Abbreviate "asked_about";                   !    10x, saved    88
Abbreviate " anything";                     !    29x, saved   194
Abbreviate "courtyard";                     !    15x, saved    96
Abbreviate "flagstone";                     !    23x, saved   152
Abbreviate " yourself";                     !    27x, saved   180
Abbreviate "something";                     !    29x, saved   194
Abbreviate "innkeeper";                     !    16x, saved   103
Abbreviate " to the ";                      !   167x, saved   993
Abbreviate "already ";                      !    26x, saved   147
Abbreviate " in the ";                      !    84x, saved   495
Abbreviate " through";                      !    22x, saved   123
Abbreviate "need to ";                      !    32x, saved   183
Abbreviate " at the ";                      !    42x, saved   243
Abbreviate " of the ";                      !   124x, saved   735
Abbreviate "cucumber";                      !    41x, saved   237
Abbreviate "village";                       !    96x, saved   471
Abbreviate " before";                       !    26x, saved   121
Abbreviate "samurai";                       !    42x, saved   201
Abbreviate ". You ";                        !    70x, saved   411
Abbreviate " about";                        !    82x, saved   322
Abbreviate "priest";                        !    36x, saved   138
Abbreviate "can't ";                        !    48x, saved   231
Abbreviate " your ";                        !   139x, saved   550
Abbreviate "river";                         !    51x, saved   147
Abbreviate " and ";                         !   235x, saved   699
Abbreviate ", but";                         !    99x, saved   390
Abbreviate " you ";                         !   283x, saved   843
Abbreviate "kappa";                         !    87x, saved   255
Abbreviate "have ";                         !    75x, saved   219
Abbreviate "south";                         !    61x, saved   177
Abbreviate "It's ";                         !    87x, saved   426
Abbreviate " that";                         !   179x, saved   531
Abbreviate " from";                         !    68x, saved   198
Abbreviate " with";                         !    92x, saved   270
Abbreviate " the ";                         !   585x, saved  1749
Abbreviate ". The";                         !   104x, saved   511
Abbreviate " you'";                         !    75x, saved   294
Abbreviate " has ";                         !    46x, saved   132
Abbreviate "north";                         !    47x, saved   135
Abbreviate "round";                         !    44x, saved   126
Abbreviate " look";                         !    55x, saved   159
Abbreviate "ould ";                         !    47x, saved   135
Abbreviate " are ";                         !    76x, saved   222
Abbreviate "child";                         !    37x, saved   105
Abbreviate " like";                         !    48x, saved   138
Abbreviate "very ";                         !    39x, saved   111
Abbreviate "can ";                          !   148x, saved   290
Abbreviate " of ";                          !   159x, saved   312
Abbreviate "You'";                          !    82x, saved   322
Abbreviate " is ";                          !   172x, saved   338
Abbreviate "here";                          !   158x, saved   310
Abbreviate " or ";                          !    55x, saved   104
Abbreviate " to ";                          !   292x, saved   578
Abbreviate "n't ";                          !    99x, saved   291
Abbreviate "ight";                          !    51x, saved    96
Abbreviate "The ";                          !   153x, saved   453
Abbreviate "ing ";                          !   238x, saved   470
Abbreviate "You ";                          !   171x, saved   507
Abbreviate "find";                          !    50x, saved    94
Abbreviate " you";                          !   118x, saved   230
Abbreviate "east";                          !    55x, saved   104
Abbreviate "side";                          !    46x, saved    86
Abbreviate "not ";                          !    63x, saved   120
Abbreviate " for";                          !   126x, saved   246
Abbreviate "tion";                          !    88x, saved   170
Abbreviate "his ";                          !    95x, saved   184
Abbreviate "know";                          !    56x, saved   106
Abbreviate "ter";                           !   136x, saved   133
Abbreviate "ll ";                           !   160x, saved   157
Abbreviate " it";                           !   210x, saved   207
Abbreviate "'s ";                           !   181x, saved   356
Abbreviate " I ";                           !    71x, saved   136
Abbreviate "ear";                           !    98x, saved    95
Abbreviate "ing";                           !   222x, saved   219
Abbreviate " in";                           !   179x, saved   176
Abbreviate " on";                           !   128x, saved   125
Abbreviate "er ";                           !   199x, saved   196
Abbreviate "est";                           !   166x, saved   163
Abbreviate "ent";                           !   100x, saved    97
Abbreviate "and";                           !   127x, saved   124
Abbreviate ". I";                           !   118x, saved   348
Abbreviate "re ";                           !   118x, saved   115
Abbreviate "She";                           !    52x, saved    98
Abbreviate "lea";                           !    78x, saved    75
Abbreviate " a ";                           !   257x, saved   254
Abbreviate "ed ";                           !   139x, saved   136
Abbreviate "the";                           !   206x, saved   203
Abbreviate ".]";                            !    28x, saved   106
Abbreviate ", ";                            !   325x, saved   322
Abbreviate ".~";                            !   275x, saved   544
Abbreviate ". ";                            !   310x, saved   307
Abbreviate "~I";                            !    75x, saved   144

Constant Story "The Samurai and the Kappa";
#Ifv5;
Zcharacter table + '@{A9}'; !Add copyright symbol
Constant Headline "^Copyright @{A9} 2024 Garry Francis^https://warrigal.itch.io^Type ABOUT for further info and credits.^^";
#Ifnot;
Constant Headline "^Copyright (c) 2024 Garry Francis^https://warrigal.itch.io^Type ABOUT for further info and credits.^^";
#Endif;

Array UUID_ARRAY string "UUID://d4b9e81b-04c3-40ad-8ff1-c436f18980e6//";
#Ifdef UUID_ARRAY;
#Endif;

Release 1;
Serial "240628";

!Inform 6 constants
Constant DEATH_MENTION_UNDO;
Constant MAX_CARRIED = 10;
Constant NO_SCORE;

!PunyInform constants
Constant CUSTOM_ABBREVIATIONS;
Constant CUSTOM_PLAYER_OBJECT = samurai;
Constant OPTIONAL_EXTENDED_METAVERBS;
Constant OPTIONAL_EXTENDED_VERBSET;
Constant OPTIONAL_FULL_DIRECTIONS;
#Ifv5;
Constant OPTIONAL_PROVIDE_UNDO;
#Endif;
Constant RUNTIME_ERRORS 0;!0 for release, 2 for debug

!PunyInform static messages
Constant MSG_CLIMB_DEFAULT "You're a samurai, not a monkey.";
Constant MSG_DIG_NO_USE "You're a samurai, not a farmer. Leave the digging to those that know what they're doing.";
Constant MSG_KISS_DEFAULT "You shouldn't go around kissing strangers.";
Constant MSG_PARSER_NO_INPUT "You need to enter a command.";
Constant MSG_PARSER_UNKNOWN_VERB "That's not a verb I recognise.";
Constant MSG_PRAY_DEFAULT "You mumble a few words of prayer to your deceased ancestors.";
Constant MSG_SORRY_DEFAULT "Oh, don't apologise.";
Constant MSG_WAIT_DEFAULT "Time passes...";

!PunyInform dynamic messages
Constant MSG_CLOSE_NOT_OPEN 1000;
Constant MSG_LOCK_ALREADY_LOCKED 1001;
Constant MSG_LOCK_CLOSE_FIRST 1002;
Constant MSG_LOCK_KEY_DOESNT_FIT 1003;
Constant MSG_UNLOCK_ALREADY_UNLOCKED 1004;
Constant MSG_UNLOCK_KEY_DOESNT_FIT 1005;
Constant MSG_INVENTORY_DEFAULT 1006;

!Game-specific constants
Constant AN "an";
Constant SOME "some";
Constant THE "the";
Constant YOUR "your";
Constant ASK_FOR_HINT_NORTH_OF_HONDEN "Ask for a HINT north of the honden.";
Constant ASK_VILLAGERS_ABOUT_HUTS "If you want to know who lives in each hut, you could ask the villagers.";
Constant BAMBOO_FENCE_PREVENTS_YOU "A bamboo fence prevents you going any further ";
Constant DESCRIBE_POST_TOWN "~A post-town is a bigger town that has lodging for high-ranking travellers, like yourself. Post-towns must have at least one honjin or chief inn for those people to rest.~";
Constant DESCRIBE_HONJIN "~A honjin is a chief inn that you'll find in a post-town.~";
Constant DOES_NOT_DROP_SWORDS "A samurai does not drop his swords, except when he bathes.";
Constant FIRST_OPENING_SCREEN "(first opening the sliding paper screen)^^";
Constant FOLLOW_PATH "You follow the path around the outside of the honden.";
Constant GET_SOME_WITH_YOUR_MEAL "~I'll get you some with your meal.~";
Constant HOLD_SWORDS_ABOVE_HEAD "You hold your swords above your head and wade across the river.^^";
Constant HOPE_YOU_ENJOYED_IT "~I hope you enjoyed it.~";
Constant ITS_A_PAPER_SCREEN "It's a paper screen in a light wooden frame. It's currently ";
Constant KEEP_GOING " says, ~Keep going. The village is to the ";
Constant LOST_IN_SWAMP "If you're lost in the swamp, use your other senses to distinguish the different locations.";
Constant MOKUKO_FOLLOWS_YOU "Mokuko follows you.^^";
Constant NONE_LEFT "There's none left.";
Constant REMEMBER_RITUAL "Remember the ritual.";
Constant REMOVE_POUCH_FIRST "You'll have to remove your pouch first.";
Constant SWAMP_DESCRIPTION "You're in a dank, foul-smelling swamp and your feet sink in the sticky mud. You can go in all directions, but the dense vegetation prevents you seeing where they lead.";
Constant TRY_ASKING_HIDEMOCHI_ABOUT "Try asking Hidemochi about the ";
Constant TRY_ASKING_NAGATANE_ABOUT "Try asking Nagatane about the ";
Constant TRY_ASKING_NAKAARI_ABOUT "Try asking Nakaari about the ";
Constant TRY_ASKING_PRIEST_ABOUT "Try asking the priest about the ";
Constant TRY_ASKING_SUMINI_ABOUT "Try asking Sumini about the ";
Constant TRY_ASKING_YONO_ABOUT "Try asking Yono about the ";
Constant TRY_ASKING_YOSHIMORO_ABOUT "Try asking Yoshimoro about the ";
Constant TRY_ASKING_YUKIMOTO_ABOUT "Try asking Yukimoto about the ";
Constant TRY_TALKING_TO_ELDER "Try talking to the village elder before talking to the villagers.";
Constant TRY_TALKING_TO_MOKUKO "Try talking to Mokuko.";
Constant TRY_TALKING_TO_NAGATANE "Try talking to Nagatane and follow his directions.";
Constant TRY_TALKING_TO_YOUNG_MAN "Try talking to the young man.";
Constant TRY_TALKING_TO_VILLAGE_ELDER "Try talking to the village elder.";
Constant WE_HAVE_FINEST_SAKE "~We have some of the finest sake in Japan, but I can't just give it away. It costs a silver coin.~";
Constant YOU_HEAR_RUNNING_WATER_TO_WEST "You can hear the sound of running water to the west.";
Constant NAGATANE_CROP = 1;
Constant NAGATANE_DRINK = 2;
Constant NAGATANE_HUT = 4;
Constant SUMINI_CROP = 8;
Constant SUMINI_DRINK = 16;
Constant SUMINI_HUT = 32;
Constant YOSHIMORO_CROP = 64;
Constant YOSHIMORO_DRINK = 128;
Constant YOSHIMORO_HUT = 256;
Constant YONO_CROP = 512;
Constant YONO_DRINK = 1024;
Constant YONO_HUT = 2048;
Constant MAX_TUTORIAL 22;
Constant TUT_LOOK 0;
Constant TUT_EXAMINE_ME 1;
Constant TUT_INVENTORY 2;
Constant TUT_EXAMINE_ALL 3;
Constant TUT_MOVEMENT 4;
Constant TUT_EXAMINE_KAMISHIMO 5;
Constant TUT_EXAMINE_KATAGINU 6;
Constant TUT_OPEN_POUCH 7;
Constant TUT_TAKE_COIN 8;
Constant TUT_PUT_COIN 9;
Constant TUT_REMOVE_WARAJI 10;
Constant TUT_DROP_WARAJI 11;
Constant TUT_TALK 12;
Constant TUT_ASK_INNKEEPER 13;
Constant TUT_ASK_MAID 14;
Constant TUT_ASK_ABOUT_SERVICE 15;
Constant TUT_SLEEP 16;
Constant TUT_ASK_ABOUT_KAPPA 17;
Constant TUT_HELP_HINT 18;
Constant TUT_CLUES_USED 19;
Constant TUT_DROP_ITEMS_IN_MAZE 20;
Constant TUT_LISTEN_IN_MAZE 21;

!Replaced actions
Replace GoSub;
Replace LockSub;
Replace UnlockSub;

Include "globals.h";

!Game-specific variables
Array tutorial_used -> MAX_TUTORIAL;
Array yard_start -> 0 4 0 0 3
                  0 0 2 0 0
                  0 0 0 0 0
                  0 0 0 0 0
                  0 0 0 0 5;

Array yard_now -> 0 4 0 0 3
                  0 0 2 0 0
                  0 0 0 0 0
                  0 0 0 0 0
                  0 0 0 0 5;

Array yard_end -> 0 4 6 6 3
                  0 6 2 6 0
                  0 6 0 6 0
                  6 6 6 6 6
                  0 0 0 0 5;

Global tutorial = true;
Global tutorial_shown = false;
Global clues_used = 0;

!========================================
! Entry point routines
!========================================
[ ChooseObjects obj code;
  if (code == 2)
  {
    ! Stage 1: Disambiguation
    if (action_to_be == ##Take && obj notin player)
      return 1; !Appropriate
    if (action_to_be == ##Drop && obj in player && obj hasnt worn)
      return 1; !Appropriate
    return 0; !Inappropriate
  }
  ! Stage 2: Processing an "all"
  if (action_to_be == ##Wear && obj hasnt clothing)
    return 2; !Force exclusion
  if (action_to_be == ##Wear && obj hasnt worn)
    return 1; !Force inclusion
  if (action_to_be == ##Disrobe && obj has worn)
    return 1; !Force inclusion
  if (action_to_be == ##Disrobe)
    return 2; !Force exclusion
  return 0; !Accept parser's decision
];

[ DisallowTakeAnimate obj;
  if (obj == girl)
    rfalse;
];

[ LibraryMessages p_msg p_arg_1 p_arg_2;
  switch (p_msg)
  {
    MSG_CLOSE_NOT_OPEN:
      print_ret (CTheyreOrIts)noun, " already closed.";
    MSG_LOCK_ALREADY_LOCKED:
      print_ret (CTheyreOrIts)noun, " already locked.";
    MSG_LOCK_CLOSE_FIRST:
      "You'll have to close ", (ItOrThem)noun, " first.";
    MSG_LOCK_KEY_DOESNT_FIT:
      print_ret (The)second, " ", (DoesntOrDont)second, " fit the lock.";
    MSG_UNLOCK_ALREADY_UNLOCKED:
      print_ret (CTheyreOrIts)noun, " already unlocked.";
    MSG_UNLOCK_KEY_DOESNT_FIT:
      print_ret (The)second, " ", (DoesntOrDont)second, " fit the lock.";
    MSG_INVENTORY_DEFAULT:
      p_arg_1 = "You're carrying ";
      if (inventory_style == 0)
      {
        p_arg_1 = "You're carrying:";
        p_arg_2 = NEWLINE_BIT;
      }
      if (PrintContents(p_arg_1, player, p_arg_2))
      {
        if (inventory_style)
          print ".^";
        if (kamishimo has worn)
          ShowTutorial(TUT_EXAMINE_KAMISHIMO);
        rtrue;
      }
      rfalse;
  }
  p_arg_1 = p_arg_2;
];

[ LookRoutine;
  if (~~tutorial)
    return;
  if (location has visited)
    return;
  if (location == room01)
    ShowTutorial(TUT_LOOK);
  if (location == room02)
    ShowTutorial(TUT_TALK);
  return;
];

Include "puny.h";

!========================================
! Initialisation
!========================================
[ Initialise;
  location = room01;
  lookmode = 2;
  move tachi to player;
  move katana to player;
  move kamishimo to player;
  move pouch to player;
  move waraji to player;
  no_implicit_actions = true;
  StartDaemon(room01);
  print "Ever since the Battle of Sekigahara and the rise of the Tokugawa shogunate, the samurai have gradually lost their military function to become courtiers, bureaucrats and administrators. This life was not for you, so you find yourself wandering from town to town looking for work where your sword skills are valued. There's always plenty of work escorting dignitaries, or seeking out weapon smugglers and bandits.^^Late one evening you wander into a small town. As it's not a post-town, it doesn't have a honjin for high-ranking travellers, so you enter the lobby of a hatagoya that faces the street. You're greeted by the innkeeper, who bows deeply and invites you inside. You don't need much coaxing, as you're looking forward to a bath, a meal and a good night's sleep.^^The innkeeper enters the inn to make arrangements, leaving you to remove your waraji.^^";
  print_ret (italic)"[You're about to embark on an adventure. You can move around, examine things and manipulate things by typing simple text commands of one or more words, usually starting with a verb. The tutorial will offer suggestions to get you started. Commands in the tutorial are shown in upper case, but you can enter them in lower case, if you prefer. You can turn the tutorial off by typing TUTORIAL OFF and turn it back on by typing TUTORIAL ON. Good luck.]^^[WARNING: This game contains nudity, mild sexual references and adult content. Do not play if you're likely to be offended by this.]^";
];

!========================================
! Classes
!========================================
Class OpenableContainer
with
  invent
  [;
    if (inventory_stage == 2 && (self hasnt open || child(self) == 0))
    {
      if (self has worn)
        print " (worn)";
      rtrue;
    }
  ],
has container openable;

Class OpenContainer
with
  invent
  [;
    if (inventory_stage == 2 && child(self) == 0)
      rtrue;
  ],
has container open;

!========================================
! Inventory
!========================================
!----------------------------------------
! Samurai
!----------------------------------------
Object samurai "samurai"
with
  parse_name
  [ i;
    while (NextWord() == 'me' or 'myself' or 'self' or 'samurai' or 'haruko' or 'tadamori')
      i++;
    return i;
  ],
  description
  [;
    print "Your name is Haruko Tadamori, the last in a long line of proud and honourable samurai in the Haruko family.^";
    ShowTutorial(TUT_INVENTORY);
    rtrue;
  ],
  before
  [;
    Rub:
      if (location == room04 && bath has general)
        "Mokuko has already bathed you.";
      if (location == room04)
        "That's Mokuko's job. Get in the bath and she'll bathe you.";
      if (location == room24 or room34)
        "The river water is dirty.";
      if (location ~= room15)
        "This is not an appropriate location to be washing yourself.";
      if (temizuya has general)
        "You've already cleansed yourself of any bad spirits. There's no need to overdo it.";
      give temizuya general;
      "You wash your left hand, then your right hand, then rinse your mouth, as is the custom. You're now cleansed of any bad spirits and can enter the haiden.";
  ],
  capacity MAX_CARRIED,
  add_to_scope bum,
has animate concealed transparent;

!----------------------------------------
! Bum
!----------------------------------------
Object bum "bum"
with
  article YOUR,
  parse_name
  [ i;
    while (NextWord() == 'anus' or 'arse' or 'ass' or 'backside' or 'bottom' or 'bum' or 'butt' or 'butthole' or 'buttocks' or 'rear')
      i++;
    return i;
  ],
  description
  [;
    if (kamishimo has worn)
      "You can't see it under your kamishimo.";
    else
      "Your lily white bottom is exposed for the whole world to see, but you can't see it yourself.";
  ],
  before
  [;
    Expose:
      if (location ~= room24)
        "A samurai does not go around exposing his private parts to all and sundry.";
      if (kappa in location)
        "Once is enough. If you expose your bottom a second time, the kappa is close enough that it can remove your entrails.";
      move kappa to location;
      "You turn your back to the river, lower your hakama and expose your backside to the river. After a short wait, you hear something emerge from the water. You quickly raise your hakama and spin around to see the ugliest creature you've ever set your eyes on. It's the kappa!";
  ],
has scenery;

!----------------------------------------
! Kamishimo
!----------------------------------------
Object kamishimo "kamishimo"
with
  article YOUR,
  parse_name
  [ i;
    while (NextWord() == 'kamishimo' or 'three-part' or 'outfit' or 'clothing' or 'clothes')
      i++;
    return i;
  ],
  description
  [;
    print "It's a three-part outfit, consisting of a kataginu, a kimono and a hakama.^";
    ShowTutorial(TUT_EXAMINE_KATAGINU);
    rtrue;
  ],
  before
  [;
    Disrobe:
      if (location ~= room04)
        "A samurai does not walk around naked.";
      if (pouch has worn)
        print_ret (string)REMOVE_POUCH_FIRST;
    Wear:
      if (self hasnt worn && pouch has worn)
        print_ret (string)REMOVE_POUCH_FIRST;
  ],
  add_to_scope kataginu kimono hakama,
has clothing worn;

!----------------------------------------
! Kataginu
!----------------------------------------
Object kataginu "kataginu"
with
  article YOUR,
  parse_name
  [ i;
    while (NextWord() == 'kataginu' or 'outer' or 'coat' or 'vest' or 'wide' or 'shoulders' or 'purplish-grey' or 'hemp')
      i++;
    return i;
  ],
  description
  [;
    tutorial_shown = 1;!Prevent next tutorial clue
    "The kataginu is the outer coat or vest of your clothing. It's open under the arms with wide shoulders, making it the more obvious sign of your rank as a samurai. It's made from a purplish-grey hemp, which is a very hardy material.";
  ],
  before
  [;
    Disrobe:
      <<Disrobe kamishimo>>;
    Wear:
      <<Wear kamishimo>>;
  ],
has scenery;

!----------------------------------------
! Kimono
!----------------------------------------
Object kimono "kimono"
with
  article YOUR,
  parse_name
  [ i;
    while (NextWord() == 'kimono' or 'inner' or 'shirt' or 'shirt-like' or 'garment' or 'white' or 'silk')
      i++;
    return i;
  ],
  description
  [;
    tutorial_shown = 1;!Prevent next tutorial clue
    "The kimono is the inner, shirt-like garment that covers your torso. It's made of white silk, which is cool in the summer.";
  ],
  before
  [;
    Disrobe:
      <<Disrobe kamishimo>>;
    Wear:
      <<Wear kamishimo>>;
  ],
has scenery;

!----------------------------------------
! Hakama
!----------------------------------------
Object hakama "hakama"
with
  article YOUR,
  parse_name
  [ i;
    while (NextWord() == 'hakama' or 'baggy' or 'pair' or 'of' or 'trousers' or 'pants')
      i++;
    return i;
  ],
  description
  [;
    tutorial_shown = 1;!Prevent next tutorial clue
    "The hakama is like a baggy pair of trousers, made from the same material as the kataginu.";
  ],
  before
  [;
    Disrobe:
      <<Disrobe kamishimo>>;
    Wear:
      <<Wear kamishimo>>;
  ],
has pluralname scenery;

!----------------------------------------
! Waraji
!----------------------------------------
Object waraji "waraji"
with
  article "a pair of",
  parse_name
  [ i;
    while (NextWord() == 'waraji' or 'sandals' or 'footwear' or 'rice' or 'straw' or 'rope')
      i++;
    return i;
  ],
  description
  [;
    tutorial_shown = 1;!Prevent next tutorial clue
    "The waraji are sandals made from rice straw rope. They're very comfortable, but they wear out quickly if you do a lot of walking. If it was winter, you'd be wearing tabi socks or the more expensive kegutsu horse mane shoes, to keep your feet warm.";
  ],
  before
  [;
    Disrobe:
      if (location ~= room01)
        "You need to keep your sandals on to protect your feet.";
  ],
  after
  [;
    Disrobe:
      PrintMsg(MSG_DISROBE_DEFAULT);
      ShowTutorial(TUT_DROP_WARAJI);
      rtrue;
  ],
has clothing pluralname worn;

!----------------------------------------
! Pouch
!----------------------------------------
Object pouch "money pouch"
class OpenableContainer
with
  article YOUR,
  parse_name
  [ i;
    while (NextWord() == 'money' or 'pouch' or 'animal' or 'skin' or 'draw' or 'cord')
      i++;
    return i;
  ],
  description
  [;
    print "It's a small animal skin pouch with a draw cord. ";
    <Search self>;
    if (self hasnt open)
      ShowTutorial(TUT_OPEN_POUCH);
    rtrue;
  ],
  before
  [;
    Disrobe:
      if (location ~= room04)
        "It's safer to wear your pouch so that you don't lose it.";
    Receive:
      if (noun ~= coin)
        "You can only put coins in the money pouch.";
      remove coin;
      coins.number++;
      "You put the coin back in the pouch.";
  ],
  after
  [;
    Open:
      PrintMsg(MSG_OPEN_DEFAULT);
      if (coin in nothing)
        ShowTutorial(TUT_TAKE_COIN);
      rtrue;
  ],
has clothing container openable worn;

!----------------------------------------
! Silver coins
!----------------------------------------
Object coins "silver coins" pouch
with
  article
  [;
    print self.number;
  ],
  name 'silver' 'coins',
  parse_name
  [ nw i flag;
    nw = NextWord();
    while (nw == 'silver' or 'coin' or 'coins')
    {
      i++;
      if (nw == 'silver' or 'coin' && TestScope(coin))
        flag++;
      nw = NextWord();
    }
    if (i == flag)
      return 0;
    return i;
  ],
  description
  [;
    print_ret "These are the silver coins that you've earned in the past few weeks. There are ", self.number, " left.";
  ],
  before
  [;
    Take:
      if (coin notin nothing)
        "You've already taken one.";
      move coin to player;
      self.number--;
      PronounNotice(coin);
      print "You take a coin out of the pouch.^";
      ShowTutorial(TUT_PUT_COIN);
      rtrue;
  ],
  number 10,
has pluralname static;

!----------------------------------------
! Silver coin
!----------------------------------------
Object coin "silver coin"
with
  parse_name
  [ i;
    while (NextWord() == 'silver' or 'coin' or 'four' or 'characters' or 'square' or 'hole' or 'centre' or 'center')
      i++;
    return i;
  ],
  description "It's a silver coin with four characters around a square hole in the centre.",
  before
  [;
    Drop:
      "You worked hard to earn that money. You shouldn't just throw it away. When you need it, you can either GIVE it to someone or BUY something with it.";
  ],
has;

!----------------------------------------
! Tachi
!----------------------------------------
Object tachi "tachi"
with
  article YOUR,
  parse_name
  [ i;
    while (NextWord() == 'tachi' or 'long' or 'sword' or 'swords//p' or 'curved' or 'blade')
      i++;
    return i;
  ],
  description
  [;
    tutorial_shown = 1;!Prevent next tutorial clue
    "The tachi is the longer of your two swords. It has a curved blade that was crafted by a master swordsmith and handed down to you by your father. It's worn with the edge down.";
  ],
  before
  [;
    Drop:
      if (location ~= room04)
        print_ret (string)DOES_NOT_DROP_SWORDS;
  ],
has;

!----------------------------------------
! Katana
!----------------------------------------
Object katana "katana"
with
  article YOUR,
  parse_name
  [ i;
    while (NextWord() == 'katana' or 'short' or 'sword' or 'swords//p' or 'curved' or 'blade')
      i++;
    return i;
  ],
  description
  [;
    tutorial_shown = 1;!Prevent next tutorial clue
    "The katana is the shorter of your two swords. It has a curved blade that was crafted by a master swordsmith and handed down to you by your father. It's worn with the edge up.";
  ],
  before
  [;
    Drop:
      if (location ~= room04)
        print_ret (string)DOES_NOT_DROP_SWORDS;
  ],
has;

!========================================
! Room 1: Lobby
!========================================
Object room01 "Lobby"
with
  description "The covered lobby has an earthen floor where guests can take off their footwear while protected during inclement weather. Swallows and house martins have also sought shelter here by building their nests in the rafters and under the eaves. The honjin (or chief inn) would have an entrance courtyard closed to outside view by a wall and a substantial gate, whereas this hatagoya (or small inn) has just an opening directly onto the street to the west. The entry to the inn is up a step to the north.",
  n_to
  [;
    if (waraji has worn)
    {
      print "It's customary to remove your footwear before going indoors.^";
      ShowTutorial(TUT_REMOVE_WARAJI);
      rtrue;
    }
    if (waraji in player)
      "It's customary to leave your footwear outside.";
    return room02;
  ],
  w_to
  [;
    if (room02 hasnt visited)
      "You've only just arrived. You need a bath, a meal and a good night's sleep. The inn is the place to do that.";
    if (bath hasnt general)
      "You're hot and dirty. You need a bath before you can leave.";
    if (table notin nothing)
      "You're hungry. You need a good meal before you can leave.";
    if (futon hasnt general)
      "You're very tired. You need a good sleep before you can leave.";
    if (waraji hasnt worn)
      "You'll need to put your footwear back on before venturing out onto the street.";
    return room07;
  ],
  before
  [;
    Go:
      if (selected_direction == in_to)
        <<Go FAKE_N_OBJ>>;
      if (selected_direction == out_to)
        <<Go FAKE_W_OBJ>>;
    Hint:
      if (room02 hasnt visited)
        "Try entering the hatagoya to the north.";
      if (room07 hasnt visited)
        "Try leaving the lobby to the west.";
  ],
  daemon
  [;
    if (action == ##Help or ##Hint)
      return;
    if (tutorial)
    {
      if (tutorial_shown == 0)
        ShowTutorial(TUT_EXAMINE_ME);
      if (tutorial_shown == 0)
        ShowTutorial(TUT_INVENTORY);
      if (tutorial_shown == 0)
        ShowTutorial(TUT_EXAMINE_ALL);
      if (tutorial_shown == 0)
        ShowTutorial(TUT_MOVEMENT);
      if (tutorial_shown == 0)
        StopDaemon(self);
      tutorial_shown = 0;
    }
  ],
has light;

!----------------------------------------
! Hatagoya (floating object)
!----------------------------------------
Object "hatagoya"
with
  name 'hatagoya' 'small' 'inn',
  description "It's only a small inn. From what you can see, there's no sign of any other guests. If there are any, they may be in their rooms.",
  found_in
  [;
    if (location == room01 or room02 or room03 or room04 or room05 or room06)
      rtrue;
  ],
has scenery;

!----------------------------------------
! Lobby
!----------------------------------------
Object "lobby" room01
with
  name 'covered' 'lobby',
  description "The lobby has an earthen floor and straw ceiling, which is indicative of its status.",
has scenery;

!----------------------------------------
! Earthen floor
!----------------------------------------
Object "floor" room01
with
  name 'earth' 'earthen' 'floor',
  description "The earthen floor has been packed hard by hundreds of feet over the years.",
has scenery;

!----------------------------------------
! Opening
!----------------------------------------
Object "opening" room01
with
  article AN,
  name 'opening',
  description "It leads west onto the street.",
has scenery;

!----------------------------------------
! Straw ceiling
!----------------------------------------
Object "ceiling" room01
with
  name 'straw' 'ceiling',
  description "The ceiling is made of straw held up by wooden rafters.",
has scenery;

!----------------------------------------
! Wooden rafters
!----------------------------------------
Object "rafters" room01
with
  parse_name
  [ i;
    while (NextWord() == 'wood' or 'wooden' or 'rafter' or 'rafters' or 'eave' or 'eaves')
      i++;
    return i;
  ],
  description "The eaves and rafters have mud nests of swallows and house martins.",
has pluralname scenery;

!----------------------------------------
! Mud nests
!----------------------------------------
Object "nests" room01
with
  name 'mud' 'nest' 'nests',
  description "They're the nests of swallows and house martins. The innkeepers encourage this, and even build shelves for nest building, as the birds control the mosquito population.",
has pluralname scenery;

!----------------------------------------
! Birds
!----------------------------------------
Object "birds" room01
with
  parse_name
  [ i;
    while (NextWord() == 'swallow' or 'swallows' or 'house' or 'martin' or 'martins' or 'bird' or 'birds')
      i++;
    return i;
  ],
  description "There's no sign of any birds at the moment. They're probably foraging for food.",
has pluralname scenery;

!----------------------------------------
! Step
!----------------------------------------
Object "step" room01
with
  name 'step',
  description "It's customary to have a step from the outside to the inside, as this shows the boundary between where footwear can be worn and can't be worn respectively.",
has scenery;

!----------------------------------------
! Honjin
!----------------------------------------
Object "honjin" room01
with
  parse_name
  [ nw i flag;
    nw = NextWord();
    while (nw == 'honjin' or 'chief' or 'inn')
    {
      i++;
      if (nw == 'inn')
        flag++;
      nw = NextWord();
    }
    if (i == flag)
      return 0;
    return i;
  ],
  description "There's no honjin here, as this is not a post-town.",
has scenery;

!========================================
! Room 2: Hatagoya
!========================================
Object room02 "Hatagoya"
with
  description "This hatagoya (or small inn) is typical of many that you've seen in other small towns. It's comprised of a raised timber platform covered with tatami matting. There's a small ash pit sunk into the floor with a kettle of hot water suspended over the coals for preparing tea. A sliding paper screen to the east conceals the guest rooms beyond. The exit from the hatagoya is to the south.",
  s_to
  [;
    if (futon has general && innkeeper hasnt general)
      "You can't leave until you've paid your bill.";
    else
      return room01;
  ],
  e_to
  [;
    if (innkeeper hasnt proper)
      "You should talk to the innkeeper before you go wandering around in his inn.";
    if (maid hasnt proper)
      "You should talk to the maid to get directions.";
    if (inn_screen hasnt open)
    {
      print (string)FIRST_OPENING_SCREEN;
      give inn_screen open;
    }
    if (room03 hasnt visited)
    {
      print (string)MOKUKO_FOLLOWS_YOU;
      move maid to room03;
    }
    return inn_screen;
  ],
  before
  [;
    Go:
      if (selected_direction == out_to)
        <<Go FAKE_S_OBJ>>;
    Hint:
      if (innkeeper hasnt proper)
        "Try talking to the innkeeper.";
      if (maid hasnt proper)
        "Try talking to the maid.";
      if (room03 hasnt visited)
        "Try talking to Mokuko, then follow her directions.";
      if (bath hasnt general)
        "You're hot and dirty. You need a bath.";
      if (table notin nothing)
        "You're hungry. You need a good meal.";
      if (futon hasnt general)
        "You're very tired. You need to sleep.";
      if (innkeeper hasnt general)
        "Try talking to Nakaari or asking him about the bill.";
      if (innkeeper.asked_about_kappa == 0)
        print_ret (string)TRY_ASKING_NAKAARI_ABOUT, "kappa.";
      if (innkeeper.asked_about_priest == 0)
        print_ret (string)TRY_ASKING_NAKAARI_ABOUT, "priest.";
      if (innkeeper.asked_about_elder == 0)
        print_ret (string)TRY_ASKING_NAKAARI_ABOUT, "elder.";
      if (clues_used == 4095 && bottle has scenery)
        print_ret (string)TRY_ASKING_NAKAARI_ABOUT, "sake.";
  ],
has light;

!----------------------------------------
! Floor (floating object)
!----------------------------------------
Object "floor"
with
  name 'raised' 'timber' 'platform' 'floor',
  description "It's covered by tatami matting.",
  found_in room02 room06,
has scenery;

!----------------------------------------
! Tatami matting (floating object)
!----------------------------------------
Object "tatami matting"
with
  article SOME,
  parse_name
  [ i;
    while (NextWord() == 'tatami' or 'matting' or 'mat' or 'woven' or 'rush' or 'grass')
      i++;
    return i;
  ],
  description "The tatami matting is made from woven rush grass. Apart from helping to regulate humidity, it's comfortable to walk on in bare feet and for sitting and sleeping on the floor.",
  found_in room02 room06,
has scenery;

!----------------------------------------
! Ash pit
!----------------------------------------
Object "ash pit" room02
with
  article AN,
  parse_name
  [ i;
    while (NextWord() == 'small' or 'ash' or 'pit' or 'hot' or 'coal' or 'coals')
      i++;
    return i;
  ],
  description
  [;
    print "The coals in the ash pit are ";
    if (futon hasnt general)
      "glowing red hot.";
    else
      "no longer glowing.";
  ],
has scenery;

!----------------------------------------
! Kettle of hot water
!----------------------------------------
Object "kettle of hot water" room02
with
  name 'kettle' 'of' 'hot' 'water',
  description
  [;
    print "It looks like a permanent fixture. ";
    if (futon hasnt general)
      "As it's hot, you'd better leave it alone.";
    else
      "It's still warm from last night.";
  ],
has scenery;

!----------------------------------------
! Sliding paper screen (floating object)
!----------------------------------------
Object inn_screen "sliding paper screen"
with
  parse_name
  [ i;
    while (NextWord() == 'sliding' or 'paper' or 'screen' or 'light' or 'wood' or 'wooden' or 'frame' or 'door')
      i++;
    return i;
  ],
  description
  [;
    if (self in room02)
      print (string)ITS_A_PAPER_SCREEN;
    else
      print "There are two paper screens here. The one to the east is closed. The one to the west is ";
    if (self has open)
      "open.";
    if (self in room03)
      print "also ";
    print "closed. You can open it to ";
    if (self in room02)
      "get to the guest rooms beyond.";
    else
      "return to the inn.";
  ],
  door_dir
  [;
    if (self in room02)
      return e_to;
    else
      return w_to;
  ],
  door_to
  [;
    if (self in room02)
      return room03;
    else
      return room02;
  ],
  before
  [;
    Open:
      if (self in room03 && self has open)
      "The screen to the west is already open. You must not open the screen to the east out of respect for the other guest's privacy.";
    Slide:
      if (self has open)
        <<Close self>>;
      else
        <<Open self>>;
  ],
  found_in room02 room03,
has door openable scenery;

!----------------------------------------
! Innkeeper (Nakaari)
!----------------------------------------
Object innkeeper "innkeeper" room02
with
  article AN,
  parse_name
  [ i;
    while (NextWord() == 'nakaari' or 'innkeeper' or 'portly' or 'fat' or 'man' or 'short' or 'thin' or 'hair' or 'bald' or 'scalp')
      i++;
    return i;
  ],
  short_name
  [;
    if (self has proper)
    {
      print "Nakaari";
      rtrue;
    }
  ],
  description
  [;
    print_ret (The)self, " is a portly man with short, thin hair and a bald scalp. He wears an apron that tries hard to hide his pot belly.";
  ],
  life
  [;
    Ask:
      switch (second)
      {
        'accommodation', 'bath', 'guest', 'house', 'room', 'rooms':
          print "~The bath house and guest rooms are that way.~ He points to the east.";
          if (maid in room02)
            print " ~If you talk to your maid, she'll show you the way.~";
          "";
        'account', 'bill', 'payment':
          if (futon hasnt general)
            "~You can settle your account in the morning.~";
          if (self has general)
            "~You've already paid.~";
          "~You didn't avail yourself of the extra service, so your bill is one silver coin.~";
        'age':
          "~Don't ask. I've lost count of the years.~";
        'amazake', 'tonyu':
          "~I only have sake at the moment. I normally have tea, but we're out of tea leaves.~";
        'elder', 'yukimoto':
          self.asked_about_elder = 1;
          "~You'll find him in the village.~";
        'extra', 'service', 'services', 'sex':
          "~Hey, don't ask me, ask your maid.~";
        'farmer', 'peasant', 'villager':
          if (futon hasnt general)
            "~What peasant?~";
          print "~He's from the local village. He looked very distressed. ";
          if (nagatane in room07)
            "I sent him outside, so he might be waiting for you there.~";
          else
            "Did you see him?~";
        'father':
          "~My father passed away many years ago. He built this inn, you know.~";
        'hatagoya', 'inn':
          "~I inherited this inn from my father. I've been working here since I was a boy and I'll continue to work here until the day I die.~";
        'hidemochi':
          "~Ah, I know him. He's one of the villagers. He sometimes comes in for a drink and a chat.~ He looks around to make sure no one is listening, then whispers. ~Just between you and me, I think he drinks too much.~";
        'him', 'himself', 'innkeeper', 'nakaari':
          "~I'm the owner of this inn. It's a hard life, but it's all that I know. Somebody has to do it, as we have to provide you travellers with a good meal and shelter for the night.~";
        'honjin', 'chief':
          print_ret (string)DESCRIBE_HONJIN;
        'kami', 'ancestors', 'dead', 'deities', 'spirits':
          "~The kami are the spirits of deities, or maybe dead ancestors, I'm not sure. The Shinto priest knows all about them.~";
        'kappa', 'creature', 'monster':
          self.asked_about_kappa = 1;
          "~I haven't seen it myself, but they say that it's an evil creature that lives in the river. It attracts children into the water, then drowns and eats them. I've heard that there are three things you need to know about the kappa. The village elder and the priest can tell you more.~";
        'kettle', 'matcha', 'mugicha', 'tea':
          "~There's hot water in the kettle, but I'm out of tea leaves. I'm expecting a delivery in a few days.~";
        'maid', 'mokuko':
          if (futon hasnt general)
            "~She's a nice girl. She'll provide you with any extra 'service' you require, if you ask her.~";
          else
            "~She's gone home. She only works during the evenings when we have guests.~";
        'me', 'myself', 'self', 'samurai', 'haruko', 'tadamori':
          print "~I can see that you're a samurai";
          if (self has general)
            print ", so I hope you can help the peasant find the stolen child";
          ".~";
        'mother', 'parent', 'parents':
          "~My mother was a very kind woman, but she died shortly after my father built this inn. I was only young when she died, so I don't remember her very well.~";
        'post-town':
          print_ret (string)DESCRIBE_POST_TOWN;
        'priest', 'shinshoku':
          self.asked_about_priest = 1;
          "~You can find the priest in the Shinto shrine, but you have to follow a ritual to summon him. I have no idea what the ritual is, but I think the village elder would know it.~";
        'ritual':
          if (self.asked_about_priest == 0)
            print "~If you mean the ritual needed to see the priest";
          else
            print "~As I said";
          ", I don't know it, but the village elder will.~";
        'sake', 'drink':
          if (bottle has scenery)
            print_ret (string)WE_HAVE_FINEST_SAKE;
          else
            "~You bought the last bottle of sake.~";
        'shinto':
          "~I suppose Shinto is a bit like a religion, but it's not exactly a religion like, say, Buddhism. I'm no expert, though. The Shinto priest can tell you more.~";
        'shrine', 'jinja':
          "~It's the local Shinto shrine. All the locals go there to pray to the kami of their departed friends and relatives.~";
        'town':
          "~I was born and bred in this humble, little town. It's not much, but I like it here.~";
        'village':
          "~The village is southwest of the town. Follow the main road to the south until you come to a path to the west. Follow the path past the shrine until you come to a branch to the north. Follow that and you'll find yourself in the village.~";
        'work':
          if (futon hasnt general)
            "~I don't have any work for you, but you might find something at the next town down the road.~";
          if (self hasnt general)
            "~Once you've settled your account, I know where you may be able to find some work.~";
          if (room07 hasnt visited)
            "~That peasant sounded very desperate. I'm sure a man with your skills could help him out.~";
          else
            "~Did you ask the peasant about the kappa?~";
        default:
          "~I'm but a simple innkeeper. I don't know anything about that.~";
      }
    Give:
      if (noun ~= coin)
        "~You'll have to look after your own belongings. We can't be held responsible if something gets stolen.~";
      if (self has general)
        "Nakaari says, ~Thank you good sir, but you've already paid.~";
      if (futon hasnt general)
        print_ret (The)self, " says, ~You can settle your account in the morning, as it depends on which services you use.~";
      remove coin;
      give self general;
      print "Nakaari takes your coin and bows in appreciation. ~Thank you good sir. I hope you weren't disturbed by the ruckus last night. Apparently a kappa raided the local village and stole one of the children. One of the peasants called in this morning looking for help. I told him I had a samurai staying here that was looking for work. I sent him outside, so he may be waiting for you in the street. I hope you don't mind.~^";
      ShowTutorial(TUT_ASK_ABOUT_KAPPA);
      rtrue;
    Talk:
      if (self hasnt proper)
      {
        give self proper;
        print "The innkeeper bows and welcomes you to his inn. ~My name is Nakaari. I'm the owner of this inn. We'll do everything we can to ensure that you have a pleasant stay. The cost is one silver coin for a hot bath, a meal and a bed for the night. It's an extra silver coin if you avail yourself of any extra 'service'. You can settle your account in the morning. If there's anything you need, just ask me or your maid. She's waiting for you over there.~^";
        ShowTutorial(TUT_ASK_INNKEEPER);
        rtrue;
      }
      if (futon has general && self hasnt general)
        "~Good morning. Are you ready to leave?~ You nod that you are. ~Let's see now, you didn't avail yourself of the extra service, so your bill is one silver coin.~";
      else
        "Nakaari starts talking about the hot weather, then rambles on about something else equally uninteresting. Perhaps you'd be better off asking him a question about something more specific.";
  ],
  before
  [;
    Pay:
      if (coin in player)
        <<Give coin self>>;
      "You'll need some money before you can pay ", (the)self, ".";
  ],
  add_to_scope apron belly,
  asked_about_elder 0,
  asked_about_kappa 0,
  asked_about_priest 0,
has animate;

!----------------------------------------
! Apron
!----------------------------------------
Object apron "innkeeper's apron"
with
  article THE,
  name 'innkeeper^s' 'apron',
  description "The innkeeper's apron is stained and grimy. It's tied above his belly.",
has scenery;

!----------------------------------------
! Pot belly
!----------------------------------------
Object belly "innkeeper's belly"
with
  article THE,
  name 'innkeeper^s' 'pot' 'fat' 'belly',
  description "The innkeeper looks like he eats too much or doesn't get enough exercise, probably both.",
has scenery;

!----------------------------------------
! Bottle of sake
!----------------------------------------
Object bottle "bottle of sake" room02
with
  parse_name
  [ nw i flag;
    nw = NextWord();
    while (nw == 'bottle' or 'of' or 'sake' or 'rice' or 'wine' or 'wide-mouthed' or 'porcelain' or 'tokkuri')
    {
      i++;
      if (nw == 'rice' && TestScope(rice))
        flag++;
      nw = NextWord();
    }
    if (i == flag)
      return 0;
    return i;
  ],
  description "It's a wide-mouthed porcelain bottle, known as a tokkuri, containing the finest sake or rice wine.",
  before
  [;
    if (self has scenery && action ~= ##Buy)
    {
      PrintMsg(MSG_PARSER_NOSUCHTHING);
      rtrue;
    }
    Buy:
      if (self hasnt scenery)
        print_ret (The)innkeeper, " says, ~I'm sorry sir, that was my last bottle.~";
      if (coin notin player)
        print_ret (The)innkeeper, " says, ", (string)WE_HAVE_FINEST_SAKE;
      remove coin;
      give self ~scenery;
      move self to player;
      "You hand over the silver coin and ", (the)innkeeper, " gives you a bottle of sake. ~Here you are sir. It's my last bottle, but it's the finest sake in Japan. I'm sure you'll enjoy it.~";
    Drink:
      "You should save this for later.";
  ],
has scenery;

!----------------------------------------
! Other drinks
!----------------------------------------
Object "drink" room02
with
  name 'amazake' 'matcha' 'mugicha' 'tonyu',
  description "You can't see that drink here.",
  before
  [;
    Buy:
      print_ret (The)innkeeper, " says, ~I'm sorry sir, we only sell alcohol.~";
  ],
has scenery;

!----------------------------------------
! Maid (Mokuko)
!----------------------------------------
Object maid "maid" room02
with
  name 'mokuko' 'maid' 'girl' 'woman',
  short_name
  [;
    if (self has proper)
    {
      print "Mokuko";
      rtrue;
    }
  ],
  description
  [;
    print_ret (The)self, " is very pretty, but she looks too young to be a maid. You wonder how old she is.";
  ],
  life
  [;
    Ask:
      switch (second)
      {
        'account', 'bill', 'payment':
          "~You'll have to ask the innkeeper about that, I'm just the maid.~";
        'age':
          "~I'm 16 sir, but I'm very experienced.~";
        'amazake', 'matcha', 'mugicha', 'tea', 'tonyu':
          "~Wouldn't you prefer something stronger, like sake?~";
        'bath', 'house':
          if (self in room02 or room03)
          {
            print "~The bath house is this way.~ She points to the ";
            if (self in room02)
              "east.";
            else
              "north.";
          }
          if (self in room04)
            "~This is the bath house.~";
          else
            "~The bath house is at the northern end of the hallway.~";
        'boob', 'boobs', 'breast', 'breasts', 'chest', 'cleavage', 'tit', 'tits':
          "~You like? Maybe I can provide you with some extra 'service'.~";
        'career', 'job', 'work':
          "~I'm a maid. My job is to cater to all your needs, including any extra 'service' you may desire.~";
        'ema':
          "~Aren't you familiar with ema? They're small wooden plaques shaped a bit like a shogi piece. You write prayers or wishes on them to leave in the pavilion at the Shinto shrine.~";
        'extra', 'service', 'services', 'sex':
          if (location ~= room06)
            "She looks a little embarrassed. ~Not here. Ask me again when we're in your room.~";
          if (soup notin limbo || vegetables notin limbo || rice notin limbo || sake notin limbo)
            "Mokuko says, ~After you've finished your meal.~";
          remove maid;
          give inn_screen ~open;
          give bedroom_screen ~open;
          print "Mokuko parts the folds in her kimono in a suggestive manner to reveal the cleavage of her petite breasts. The poor girl looks like she's barely out of puberty. You bow and thank her politely so that she won't be offended. You tell her, ~I must preserve my strength, as I need to look for work in the morning.~ With that, she covers her breasts, bows and shuffles backwards out of your room, leaving the sliding screen closed in her wake.^";
          ShowTutorial(TUT_SLEEP);
          rtrue;
        'father', 'mother', 'parent', 'parents':
          "~My parents died when I was 14.~";
        'guest', 'room', 'rooms':
          if (self in room02 or room03)
          {
            print "~Your room is this way.~ She points to the ";
            if (self in room02)
              "east.";
            else
              "south.";
          }
          if (self in room04)
            "~Your room is at the southern end of the hallway.~";
          else
            "~This is your room for the night.~";
        'hatagoya', 'inn':
          "~A hatagoya is a small inn like this one.~";
        'her', 'herself', 'maid', 'mokuko':
          "~I've been working here for two years. I'll make sure you have a pleasant experience in our humble little inn. If you need to know about anything, just ask me.~";
        'honjin', 'chief':
          print_ret (string)DESCRIBE_HONJIN;
        'innkeeper', 'nakaari':
          "~He's a very nice man. He gave me a job when my parents died. He's lived in this town all his life, so he knows about a lot of things. The locals say, 'If you need to know something, just ask the innkeeper'.~";
        'miso', 'soup':
          if (self notin room06)
            print_ret (string)GET_SOME_WITH_YOUR_MEAL;
          if (soup notin limbo)
            "~Drink it before it goes cold. It will warm you up.~";
          else
            print_ret (string)HOPE_YOU_ENJOYED_IT;
        'post-town':
          print_ret (string)DESCRIBE_POST_TOWN;
        'rice':
          if (self notin room06)
            print_ret (string)GET_SOME_WITH_YOUR_MEAL;
          if (rice notin limbo)
            "~Eat it up before it goes cold.~";
          else
            print_ret (string)HOPE_YOU_ENJOYED_IT;
        'sake', 'cup':
          if (self notin room06)
            print_ret (string)GET_SOME_WITH_YOUR_MEAL;
          if (sake notin limbo)
            "~Drink up. It's very good sake. Some say it's the best in Japan.~";
          else
            "~If you liked the sake, you can buy a bottle to take with you when you settle your account in the morning.~";
        'shinto', 'shrine', 'jinja':
          "~The local Shinto shrine is south of the town. I go there to leave an ema or pray for my parents.~";
        'shogi', 'board', 'chess', 'game', 'japanese', 'strategic':
          "~Shogi is a strategic board game for two players. You might know it as Japanese chess. I used to play it with my father. He was very good at it and he'd always beat me. I really miss him.~";
        'town':
          "~It's a pleasant little town. It's not a post-town, so it's not very busy.~";
        'vegetable', 'vegetables':
          if (self notin room06)
            print_ret (string)GET_SOME_WITH_YOUR_MEAL;
          if (vegetables notin limbo)
            "~Eat up. They're sourced from local farms, so they're very fresh.~";
          else
            "~I hope you enjoyed them.~";
        default:
          "She just giggles. ~I'm sorry sir. I'm just a simple maid. I don't know anything about that.~";
      }
    Kiss:
      "The maid gives a little smile. ~If you would like any extra 'service', please ask me first.~";
    Talk:
      if (self hasnt proper)
      {
        give self proper;
        print "She bows and says, ~My name is Mokuko. I'll be your maid for the evening. You can talk to me at any time. If there's anything you need, just ask me.~ She ";
        if (inn_screen hasnt open)
        {
          give inn_screen open;
          print "slides the paper screen open and ";
        }
        print "gestures to the east. ~The bath house is this way.~^";
        ShowTutorial(TUT_ASK_MAID);
        rtrue;
      }
      if (location == room02 && room03 hasnt visited)
        "She bows her head and gestures to the east. ~The bath house is this way.~";
      if (location == room03 && room04 hasnt visited)
        "She bows her head and gestures to the north. ~The bath house is this way.~";
      if (location == room04 && bath hasnt general && pouch has worn)
        "~Please remove your pouch so that I can bathe you.~";
      if (location == room04 && bath hasnt general && kamishimo has worn)
        "~Please remove all your clothes so that I can bathe you.~";
      if (location == room04 && bath hasnt general && child(player) ~= 0)
        "~Please drop all your belongings so that I can bathe you.~";
      if (location == room04 && player notin bath)
        "~Please get in the bath so that I can bathe you.~";
      if (location == room04)
        "~Please get out of the bath so that I can dry you.~";
      if (location == room06 && table in location)
        "She smiles sweetly, but she doesn't say much. She gestures towards the table and says, ~Aren't you hungry?~";
      if (location == room06)
        "She smiles sweetly and asks, ~Do you need any any extra 'service'?~";
  ],
has animate female;

!========================================
! Room 3: North Hall
!========================================
Object room03 "North Hall"
with
  description "This is the northern end of a short, narrow hallway. Its only purpose is to separate the rooms from the inn. This gives guests a feeling of privacy, although the paper walls do nothing to prevent sound travelling between the inn and the rooms. The hall continues south to your room. You can feel a steamy warmth coming from a room beyond the hall to the north. Another guest room is behind a closed sliding screen to the east and the inn is beyond the sliding screen to the west.",
  n_to
  [;
    if (room04 hasnt visited)
    {
      print (string)MOKUKO_FOLLOWS_YOU;
      move maid to room04;
    }
    return room04;
  ],
  s_to
  [;
    if (bath hasnt general)
      "You need to take a bath before going to your room.";
    return room05;
  ],
  e_to "That's not your room. Your room is to the south.",
  w_to
  [;
    if (inn_screen hasnt open)
    {
      print (string)FIRST_OPENING_SCREEN;
      give inn_screen open;
    }
    return inn_screen;
  ],
  before
  [;
    Hint:
      if (maid in self)
        print_ret (string)TRY_TALKING_TO_MOKUKO;
  ],
has light;

!----------------------------------------
! Hall (floating object)
!----------------------------------------
Object "hall"
with
  name 'hall' 'hallway',
  description "The hallway separates the guest rooms from the inn.",
  found_in room03 room05,
has scenery;

!----------------------------------------
! Guest room (floating object)
!----------------------------------------
Object "guest room"
with
  name 'bedroom' 'guest' 'room' 'rooms',
  description "The guest rooms are very simple affairs, about 13 square metres surrounded by paper screens. There isn't much privacy.",
  found_in room03 room05 room06,
has scenery;

!========================================
! Room 4: Bath House
!========================================
Object room04 "Bath House"
with
  description
  [;
    print "The bath house is against an outer wall of the inn since the water in the bathtub is heated by lighting a fire underneath it through a small aperture from the outside. This reduces the risk of fire breaking out in the inn itself. ";
    if (bath hasnt general)
      print "When";
    else
      print "Now that";
    " you've finished your bath, you can leave the bath house to the south.";
  ],
  s_to
  [;
    if (bath hasnt general)
      "Are you going to leave without taking a bath?";
    if (kamishimo hasnt worn)
      "You can't go wandering around naked. You need to get dressed.";
    if (pouch hasnt worn)
      "You need to wear your money pouch so that it doesn't get stolen.";
    if (tachi notin player || katana notin player)
      "You feel just as naked without your swords as you do without your clothes. You should make sure that you take both of them before you leave.";
    return room03;
  ],
  before
  [;
    Hint:
      if (maid in self)
        print_ret (string)TRY_TALKING_TO_MOKUKO;
      if (room05 hasnt visited)
        "Try leaving the bath house to the south.";
  ],
has light;

!----------------------------------------
! Bath house
!----------------------------------------
Object "bath house" room04
with
  parse_name
  [ nw i flag;
    nw = NextWord();
    while (nw == 'bath' or 'house' or 'wood' or 'panelling')
    {
      i++;
      if (nw == 'bath')
        flag++;
      nw = NextWord();
    }
    if (i == flag)
      return 0;
    return i;
  ],
  description "The bath house is lined with wood panelling to keep the cold out and the heat in.",
has scenery;

!----------------------------------------
! Bath
!----------------------------------------
Object bath "bath tub" room04
class OpenContainer
with
  parse_name
  [ i;
    while (NextWord() == 'bath' or 'tub' or 'boiling' or 'scalding' or 'hot' or 'water')
      i++;
    return i;
  ],
  description
  [;
    if (self hasnt general)
      "It's full of scalding hot water.";
    else
      "It's full of hot water, but not as clean as it was before you had your bath.";
  ],
  react_before
  [;
    Take:
      if (player in self)
        "You need to get out of the bath before you can take anything.";
  ],
  before
  [;
    Enter:
      if (self has general)
        "You've already had a bath. You're feeling nice and refreshed, so there's no need for another one. Apart from which, the maid has left you.";
      if (child(player) ~= 0)
        "You'll need to remove and drop all your clothes and belongings before getting into the bath.";
    Receive:
      "You shouldn't put anything in the bath, apart from yourself, of course.";
    Search:
      <<Examine self>>;
  ],
  after
  [;
    Enter:
      give self general;
      "You step into the bath and soak in the near scalding water while Mokuko scrubs you clean. She's very gentle, even sensuous, and you completely forget about your nakedness and vulnerability.^^When she's finished, she giggles and says, ~All done~, then waits for you to get out of the bath.";
    Exit:
      move maid to room06;
      "When you step out of the bath, Mokuko pats you dry with a fluffy towel. She seems a little shy and tries to avoid looking at your private parts. ~It's a bit late now~, you think to yourself. ~She's already seen everything.~^^When Mokuko is finished drying you, she bows and says, ~Your room is at the end of the hall. I'll get your meal.~ She then leaves you to get dressed.";
  ],
has container enterable open static;

!========================================
! Room 5: South Hall
!========================================
Object room05 "South Hall"
with
  description "You're in the short, narrow hallway that ends at the southern end of the inn. The hall continues to the north and the entry to your room is via a sliding paper screen to the east.",
  n_to room03,
  e_to
  [;
    if (bedroom_screen hasnt open)
    {
      print (string)FIRST_OPENING_SCREEN;
      give bedroom_screen open;
    }
    return bedroom_screen;
  ],
  before
  [;
    Hint:
      if (room06 hasnt visited)
        "Try entering your room to the east.";
  ],
has light;

!----------------------------------------
! Sliding paper screen (floating object)
!----------------------------------------
Object bedroom_screen "sliding paper screen"
with
  parse_name
  [ i;
    while (NextWord() == 'sliding' or 'paper' or 'screen' or 'light' or 'wood' or 'wooden' or 'frame' or 'door')
      i++;
    return i;
  ],
  description
  [;
    if (self in room05)
      print (string)ITS_A_PAPER_SCREEN;
    else
      print "The paper screens provide very little privacy, as you can almost see through them and you can hear everything that's going on in the next room. The sliding screen to the west is currently ";
    if (self has open)
      "open.";
    print "closed. You can slide it open it to ";
    if (self in room05)
      "enter your room.";
    else
      "return to the hall.";
  ],
  door_dir
  [;
    if (self in room05)
      return e_to;
    else
      return w_to;
  ],
  door_to
  [;
    if (self in room05)
      return room06;
    else
      return room05;
  ],
  before
  [;
    Slide:
      if (self has open)
        <<Close self>>;
      else
        <<Open self>>;
  ],
  found_in room05 room06,
has door openable scenery;

!========================================
! Room 6: Guest Room
!========================================
Object room06 "Guest Room"
with
  description "This is your room for the night. The maid has laid out futon bedding directly on top of the tatami matting. A thin paper screen separates your room from the room to the north and you can leave via a sliding paper screen to the west.",
  w_to
  [;
    if (maid in self)
      "It would be impolite to leave while the maid is serving you. Wait until she leaves.";
    if (futon hasnt general)
      "You're too tired. Try to get some sleep and you can wander about in the morning.";
    if (bedroom_screen hasnt open)
    {
      print (string)FIRST_OPENING_SCREEN;
      give bedroom_screen open;
    }
    return bedroom_screen;
  ],
  before
  [;
    Hint:
      if (maid in self && table in self)
        print_ret (string)TRY_TALKING_TO_MOKUKO;
      if (maid in self)
        "Try asking Mokuko about the service.";
      if (futon hasnt general)
        "Now that you've had a bath and a meal, you could do with a good night's sleep.";
    Sleep:
      if (table in self)
        "You're hungry. You should eat and drink all your meal before bedding down for the night.";
      if (maid in self)
        "Mokuko is still here. She seems to be waiting for you to ask her something.";
      if (futon has general)
        "You've already had a rather disturbing night's sleep and don't wish to repeat it.";
      give futon general;
      "You settle down for the night, but find it difficult to sleep because you're being eaten alive by the fleas that have taken up residence in the tatami matting. Just as you start to doze off, you're woken by squeals and giggles from your neighbour's room. He has obviously decided to avail himself of the extra service provided by his maid. When the couple next door have finished their amorous activity, you eventually fall asleep.^^Sometime during the night, you're woken by noises outside the inn and a horrible stench. You get up to investigate, but can't find anything unusual, so go back to bed. You awaken to the crowing of a rooster and get up.";
  ],
  after
  [;
    Go:
      if (self hasnt visited)
      {
        <Look>;
        "^Mokuko bows deeply when you enter the room, then kneels on the floor, bows again and waits to see if there's anything else you need.";
      }
  ],
has light;

!----------------------------------------
! Futon bedding
!----------------------------------------
Object futon "futon bedding" room06
with
  article SOME,
  name 'futon' 'bed' 'bedding',
  description
  [;
    if (self hasnt general)
      "It looks very comfortable and you look forward to having a good night's sleep.";
    else
      "It looked more comfortable last night than it does this morning. Your memories of the fleas, your amorous neighbour, the noises and foul smell during the night are still fresh in your memory.";
  ],
  before
  [;
    Enter:
      <<Sleep>>;
  ],
has static;

!----------------------------------------
! Table
!----------------------------------------
Object table "table" room06
with
  name 'low' 'table' 'stubby' 'legs',
  description
  [;
    print "It's a low table on stubby legs. ";
    <<Search self>>;
  ],
has static supporter;

!----------------------------------------
! Small bowl of miso soup
!----------------------------------------
Object soup "small bowl of miso soup" table
with
  parse_name
  [ i;
    while (NextWord() == 'small' or 'bowl' or 'of' or 'miso' or 'soup' or 'dashi' or 'broth' or 'onion')
      i++;
    return i;
  ],
  description "It's a small bowl of traditional Japanese soup made of miso paste, dashi (broth) and a clear vegetable that looks like onion.",
  before
  [;
    Drink, Eat:
      move soup_bowl to parent(self);
      move self to limbo;
      print "You clasp the bowl in your hands and slurp it down. Ah, delicious.^";
      IsMealFinished();
      rtrue;
  ],
has;

!----------------------------------------
! Empty soup bowl
!----------------------------------------
Object soup_bowl "empty soup bowl"
with
  article AN,
  name 'small' 'empty' 'soup' 'bowl',
  description "The small soup bowl is empty.",
  before
  [;
    Drink, Eat:
      print_ret (string)NONE_LEFT;
  ],
has;

!----------------------------------------
! Plate of assorted vegetables
!----------------------------------------
Object vegetables "plate of assorted vegetables" table
with
  parse_name
  [ i;
    while (NextWord() == 'plate' or 'assorted' or 'assortment' or 'of' or 'steamed' or 'vegetable' or 'vegetables' or 'bite-size' or 'chunks')
      i++;
    return i;
  ],
  description "It's a colourful assortment of steamed vegetables cut into bite-size chunks.",
  before
  [;
    Eat:
      move plate to parent(self);
      move self to limbo;
      print "You eat the vegetables with the chopsticks.^";
      IsMealFinished();
      rtrue;
  ],
has;

!----------------------------------------
! Empty plate
!----------------------------------------
Object plate "empty plate"
with
  article AN,
  name 'empty' 'plate' 'vegetable' 'vegetables',
  description "The plate is empty.",
  before
  [;
    Eat:
      print_ret (string)NONE_LEFT;
  ],
has;

!----------------------------------------
! Large bowl of rice
!----------------------------------------
Object rice "large bowl of rice" table
with
  parse_name
  [ i;
    while (NextWord() == 'large' or 'bowl' or 'of' or 'rice' or 'steamed')
      i++;
    return i;
  ],
  description "It's a large bowl of steamed rice, just sticky enough to hold together in clumps so that you can eat it with chopsticks.",
  before
  [;
    Eat:
      move rice_bowl to parent(self);
      move self to limbo;
      print "You hold the bowl in your left hand and shovel the rice into your mouth with the chopsticks in your right hand until it's all gone.^";
      IsMealFinished();
      rtrue;
  ],
has;

!----------------------------------------
! Empty rice bowl
!----------------------------------------
Object rice_bowl "empty rice bowl"
with
  article AN,
  name 'large' 'empty' 'rice' 'bowl',
  description "The large rice bowl is empty.",
  before
  [;
    Eat:
      print_ret (string)NONE_LEFT;
  ],
has;

!----------------------------------------
! Cup of sake
!----------------------------------------
Object sake "cup of sake" table
with
  parse_name
  [ nw i flag;
    nw = NextWord();
    while (nw == 'cup' or 'of' or 'sake' or 'clear' or 'rice' or 'wine')
    {
      i++;
      if (nw == 'rice' && TestScope(rice))
        flag++;
      nw = NextWord();
    }
    if (i == flag)
      return 0;
    return i;
  ],
  description "It's a cup of clear rice wine.",
  before
  [;
    Drink:
      move cup to parent(self);
      move self to limbo;
      print "You drink it down in one gulp. It's very strong and you feel it burning your throat as it goes down.^";
      IsMealFinished();
      rtrue;
  ],
has;

!----------------------------------------
! Empty cup
!----------------------------------------
Object cup "empty cup"
with
  article AN,
  name 'empty' 'cup' 'sake',
  description "The cup is empty.",
  before
  [;
    Drink:
      print_ret (string)NONE_LEFT;
  ],
has;

!----------------------------------------
! Chopsticks
!----------------------------------------
Object chopsticks "chopsticks" table
with
  article "a pair of",
  name 'chopsticks',
  description "They're short bamboo chopsticks.",
has pluralname;

!========================================
! Room 7: Dirt Road
!========================================
Object room07 "Dirt Road"
with
  description "The dirt road extends to the north and south with ramshackle buildings on either side. The hatagoya that you stayed in last night is to the east. The other buildings are shops and houses, but you have no interest in those. You originally entered the town from the north, so you have no need to return that way. Your objective lies to the south.",
  n_to "That's the way you came when you entered the town. You have no need to return there.",
  s_to
  [;
    if (nagatane in location)
    {
      move nagatane to room08;
      print (The)nagatane, " follows you.^^";
    }
    return room08;
  ],
  e_to room01,
  before
  [;
    Hint:
      if (nagatane in self && nagatane hasnt proper)
        print_ret (string)TRY_TALKING_TO_YOUNG_MAN;
      if (nagatane in self)
        print_ret (string)TRY_TALKING_TO_NAGATANE;
  ],
  after
  [;
    Go:
      if (self hasnt visited)
      {
        <Look>;
        print "^The young man sees you leave the lobby of the hatagoya and runs up to you. He prostrates himself on the dirt road and bows repeatedly. ~Please sir, I need your help. Last night, a kappa stole a child from our village. Her mother is distraught. I fear that the child has been eaten, but pray that she's still alive.~^^He looks up to you and you can see that there are tears in his eyes. His sincerity tugs at your heart strings.^^~I can see that you're a samurai. Can you help us find the child, if she's still alive, and kill this kappa so that it doesn't eat any more of our children?~^";
        ShowTutorial(TUT_HELP_HINT);
        rtrue;
      }
  ],
has light;

!----------------------------------------
! Dirt road (floating object)
!----------------------------------------
Object "dirt road"
with
  name 'dirt' 'road' 'street',
  description "It extends to the north and south.",
  found_in room07 room08 room09,
has scenery;

!----------------------------------------
! Ramshackle buildings (floating object)
!----------------------------------------
Object "buildings"
with
  parse_name
  [ i;
    while (NextWord() == 'ramshackle' or 'building' or 'buildings' or 'shop' or 'shops' or 'house' or 'houses' or 'town')
      i++;
    return i;
  ],
  description "You're unlikely to find the kappa in any of the local buildings. You need to head to the village.",
  before
  [;
    Enter:
      "You have no reason to enter any of the buildings.";
  ],
  found_in room07 room08,
has pluralname scenery;

!----------------------------------------
! Hatagoya
!----------------------------------------
Object "hatagoya" room07
with
  name 'hatagoya' 'small' 'inn',
  description "You're already familiar with the inn, after spending a night there, but if you wish to return, you can enter the lobby to the east.",
has scenery;

!----------------------------------------
! Young man (Nagatane)
!----------------------------------------
Object nagatane "young man" room07
with
  parse_name
  [ i;
    while (NextWord() == 'nagatane' or 'young' or 'man' or 'farmer' or 'peasant' or 'villager')
      i++;
    return i;
  ],
  short_name
  [;
    if (self has proper)
    {
      print "Nagatane";
      rtrue;
    }
    rfalse;
  ],
  description
  [;
    if (location ~= room07)
      print "It's the man you met outside the inn. ";
    "He's a young man, somewhat thin, but with well-defined muscles and tanned skin, a sure sign that he works outdoors.";
  ],
  life
  [;
    Ask:
      switch (second)
      {
        'amazake', 'matcha', 'tonyu':
          "~If you're trying to work out everyone's favourite drink, just ask them.~";
        'child', 'girl':
          "~She's only a little girl and the whole village loves her dearly. Please find her and return her to her mother.~";
        'crop', 'crops', 'field', 'fields', 'daikon':
          if (self notin room32)
            "~Ask me later.~";
          print "~The person who grows daikon lives at the west end of the village.~^";
          IsCluesUsed(NAGATANE_CROP);
          rtrue;
        'cucumber', 'cucumbers', 'kyuri':
          if (location ~= room32)
            "~Are you hungry?~";
          self.asked_about_cucumber = 1;
          "~If you want a cucumber, you'll have to see Hidemochi.~";
        'drink', 'drinks', 'favourite', 'favorite', 'sumini', 'mugicha', 'sake':
          print "~Sumini doesn't like drinking mugicha or sake.~^";
          IsCluesUsed(NAGATANE_DRINK);
          rtrue;
        'elder', 'yukimoto':
          "~He's the elder of our village. He's a wise man and can tell you more about the kappa.~";
        'hidemochi':
          "~You'll find him in the field north of the village.~";
        'him', 'himself', 'man', 'nagatane', 'farmer', 'peasant', 'villager':
          "~I work the fields.~";
        'house', 'houses', 'hut', 'huts', 'village':
          if (self in room07 or room08)
            "~The village is south of here. I'll show you the way.~";
          if (self in room09 or room10)
            "~The village is west of here. I'll show you the way.~";
          print "~The younger woman doesn't live at the north end of the village.~^";
          IsCluesUsed(NAGATANE_HUT);
          rtrue;
        'kappa', 'creature', 'monster':
          "~It lives in the river to the west of our village. It has green skin covered with scales, and a turtle shell on its back. It has webbed hands and feet, a beak like a bird and sharp claws. Oh, and it has a hollow skull, surrounded by bushy hair.~ This is a very detailed description. You presume that the young man must have seen a kappa and it's not just a figment of his imagination.";
        'me', 'myself', 'self', 'samurai', 'haruko', 'tadamori':
          "~I don't know you, but you look like a good man. Can you rescue the child from the kappa?~";
        'mother', 'yono':
          "~The missing child's mother works one of the fields to the west of the village. You should find her there.~";
        'priest', 'shinshoku':
          "~I believe there's a priest at the Shinto shrine, but I've never seen him.~";
        'river':
          "~That's where we get the water to water our crops.~";
        'satsumaimo':
          "~Satsumaimo is a sweet potato with purple-red skin and white flesh. It's a little drier and creamier than regular sweet potato.~";
        'shinto', 'shrine', 'jinja':
          if (self notin room32)
            print "~We'll pass";
          else
            print "~We passed";
          " it on the way to the village.~";
        'swamp':
          "~I believe there's a swamp on the other side of the river, but why would you want to go there?~";
        'yoshimoro':
          "~Yoshimoro works one of the fields to the west of the village.~";
        default:
          "~I'm only a farmer. I don't know anything about that.~";
      }
    Talk:
      print "He says, ~";
      if (self hasnt proper)
      {
        give self proper;
        print "I'm sorry, I should have introduced myself. My name is Nagatane. ";
      }
      if (self in room07 or room08)
        "The village is to the south.~";
      if (self in room09)
        "The village is to the west.~";
      "Have you had any luck finding the kappa or the child?~";
  ],
  asked_about_cucumber 0,
has animate;

!========================================
! Room 8: Dirt Road
!========================================
Object room08 "Dirt Road"
with
  description "There are very few buildings at the south end of the town. You can follow the dirt road to the north if want to return to the town or south if you want to leave the town.",
  n_to room07,
  s_to
  [;
    if (nagatane in location)
    {
      move nagatane to room09;
      print (The)nagatane, " follows you.^^";
    }
    return room09;
  ],
  before
  [;
    Hint:
      if (nagatane in self && nagatane hasnt proper)
        print_ret (string)TRY_TALKING_TO_YOUNG_MAN;
      if (nagatane in self)
        print_ret (string)TRY_TALKING_TO_NAGATANE;
  ],
  after
  [;
    Go:
      if (nagatane in location)
      {
        <Look>;
        "^", (The)nagatane, (string)KEEP_GOING, "south.~";
      }
  ],
has light;

!========================================
! Room 9: Dirt Road
!========================================
Object room09 "Dirt Road"
with
  description "You're on a dirt road that leads to a town to the north. There are no buildings here, as the land has not been cleared, and the trees are quite thick. This is clearly the start of a forest between the town and whatever lies to the south. There's also a path through the trees to the west.",
  n_to room08,
  s_to "Maybe later. For now, your destination lies to the west.",
  w_to
  [;
    if (nagatane in location)
    {
      move nagatane to room10;
      print (The)nagatane, " follows you.^^";
    }
    return room10;
  ],
  before
  [;
    Hint:
      if (nagatane in self && nagatane hasnt proper)
        print_ret (string)TRY_TALKING_TO_YOUNG_MAN;
      if (nagatane in self)
        print_ret (string)TRY_TALKING_TO_NAGATANE;
  ],
  after
  [;
    Go:
      if (nagatane in location)
      {
        <Look>;
        "^", (The)nagatane, (string)KEEP_GOING, "west.~";
      }
  ],
has light;

!----------------------------------------
! Forest (floating object)
!----------------------------------------
Object "forest"
with
  parse_name
  [ i;
    while (NextWord() == 'forest' or 'tree' or 'trees' or 'branch' or 'branches' or 'leaf' or 'leaves')
      i++;
    return i;
  ],
  description "The trees are very dense.",
  found_in
  [;
    if (location == room09 or room10 or room11 or room12 or room21 or room22 or room23 or room24 or room25 or room26 or room27 or room28 or room29 or room30 or room31 or room32 or room33)
      rtrue;
  ],
has scenery;

!----------------------------------------
! Gravel path (floating object)
!----------------------------------------
Object "gravel path"
with
  name 'path' 'junction' 'gravel',
  description "Guess what? The gravel path is paved with gravel.",
  found_in room09 room10,
has scenery;

!========================================
! Room 10: Junction of Paths
!========================================
Object room10 "Junction of Paths"
with
  description "You're at a junction in the path. The main path appears to be the one that goes to the east and south, as this is paved with gravel and looks to be well maintained. The path to the west is just bare earth.",
  s_to room14,
  e_to room09,
  w_to room11,
  after
  [;
    Go:
      if (nagatane in location)
      {
        <Look>;
        move nagatane to room32;
        "^", (The)nagatane, " says, ~You can find your own way from here. Just keep following the path to the west and the village is the first branch to the north. The village elder can tell you more about the kappa. I must leave you now, as I have to attend to the field.~ With that, he heads west and disappears into the trees.";
      }
  ],
has light;

!----------------------------------------
! Dirt path (floating object)
!----------------------------------------
Object "dirt path"
with
  parse_name
  [ i;
    while (NextWord() == 'path' or 'narrow' or 'well-worn' or 'compressed' or 'dirt' or 'bare' or 'earth')
      i++;
    return i;
  ],
  description "It's a narrow path of compressed dirt.",
  found_in
  [;
    if (location == room10 or room11 or room21 or room22 or room23 or room24 or room25 or room27)
      rtrue;
  ],
has scenery;

!========================================
! Room 11: Dirt Path
!========================================
Object room11 "Dirt Path"
with
  description "You're on a well-worn dirt path that meanders through the trees from east to west with a branch to the north. It's very narrow, indicating that it only caters for foot traffic.",
  n_to room12,
  e_to room10,
  w_to room21,
  before
has light;

!========================================
! Room 12: Southern End of Village
!========================================
Object room12 "Southern End of Village"
with
  description
  [;
    print "You're at the southern outskirts of a farming village. There are small huts scattered about like leaves tossed in the wind. There's one large hut to the east that stands out from the rest. ";
    if (room13 hasnt visited)
      print "This is no doubt the hut of someone important, such as the village elder.";
    else
      print "Having been there, you know that this is the hut of the village elder.";
    " The village continues to the north and west or you can leave the village to the south.";
  ],
  n_to room28,
  s_to room11,
  e_to room13,
  w_to room27,
  in_to room13,
has light;

!----------------------------------------
! Village (floating object)
!----------------------------------------
Object "village"
with
  name 'village' 'farming',
  description
  [;
    print_ret "It's a humble little farming village with huts scattered about. ", (string)ASK_VILLAGERS_ABOUT_HUTS;
  ],
  found_in
  [;
    if (location == room12 or room27 or room28 or room29 or room30)
      rtrue;
  ],
has scenery;

!----------------------------------------
! Large hut (floating object)
!----------------------------------------
Object "large hut"
with
  parse_name
  [ i;
    while (NextWord() == 'elder^s' or 'large' or 'hut' or 'home' or 'communal' or 'meeting' or 'place' or 'well-maintained' or 'sunshine' or 'door')
      i++;
    return i;
  ],
  description "The size of the hut indicates that it's not only the village elder's home, but also a communal meeting place.",
  before
  [;
    Enter:
      if (location == room12)
        <<Go FAKE_E_OBJ>>;
    Exit:
      if (location == room13)
        <<Go FAKE_W_OBJ>>;
  ],
  found_in room12 room13,
has scenery;

!----------------------------------------
! Small huts (floating object)
!----------------------------------------
Object huts "small huts"
with
  name 'hut' 'huts' 'small',
  description
  [;
    print "The huts all look much the same. ";
    if (location == room12)
      print "The hut to the east is open and is larger than the rest. ";
    print_ret (string)ASK_VILLAGERS_ABOUT_HUTS;
  ],
  before
  [;
    Enter:
      "The huts here are all closed. It would be impolite to enter any of them unless they're open or you've been invited.";
  ],
  found_in
  [;
    if (location == room12 or room27 or room28 or room29 or room30)
      rtrue;
  ],
has scenery;

!========================================
! Room 13: Elder's Hut
!========================================
Object room13 "Elder's Hut"
with
  description "This is a clean, well-maintained hut that's well lit by the sunshine streaming in through the door to the west. It's very large, but simply furnished, as is the custom amongst farming communities.",
  w_to room12,
  out_to room12,
  before
  [;
    Hint:
      if (yukimoto hasnt proper)
        "Try talking to the old man.";
      if (yukimoto.asked_about_kappa == 0)
        print_ret (string)TRY_ASKING_YUKIMOTO_ABOUT, "kappa.";
      if (yukimoto.asked_about_priest == 0)
        print_ret (string)TRY_ASKING_YUKIMOTO_ABOUT, "priest.";
      if (yukimoto.asked_about_ritual == 0)
        print_ret (string)TRY_ASKING_YUKIMOTO_ABOUT, "ritual.";
      if (pillar hasnt general)
        "Visit the temple and come back later.";
      if (yukimoto.asked_about_cucumber == 0)
        print_ret (string)TRY_ASKING_YUKIMOTO_ABOUT, "cucumber.";
  ],
has light;

!----------------------------------------
! Old man (Yukimoto)
!----------------------------------------
Object yukimoto "old man" room13
with
  article AN,
  parse_name
  [ i;
    while (NextWord() == 'yukimoto' or 'old' or 'man' or 'village' or 'elder' or 'grey' or 'hair' or 'stooped' or 'posture' or 'wrinkles' or 'kindly' or 'smile' or 'face')
      i++;
    return i;
  ],
  short_name
  [;
    if (self has proper)
    {
      print "Yukimoto";
      rtrue;
    }
    rfalse;
  ],
  description "He's an old man with grey hair and a stooped posture. Through all the wrinkles, there's a kindly smile in his face.",
  life
  [;
    Ask:
      switch (second)
      {
        'child', 'children', 'girl':
          "~I believe the stolen child was a little girl. Her mother would be indebted to you if you could find her unharmed.~";
        'crop', 'crops', 'field', 'fields':
          "~We rotate the crops from season to season. You'll have to ask the villagers about the crops to see who's growing what at the moment.~";
        'cucumber', 'cucumbers', 'kyuri':
          self.asked_about_cucumber = 1;
          "~You need to ask Hidemochi about that.~";
        'drink', 'drinks', 'favourite', 'favorite', 'amazake', 'matcha', 'mugicha', 'sake', 'tonyu':
          "~Everyone has their own favourite drink. Ask the villagers about the drinks to find out more.~";
        'fart', 'farts', 'farting':
          "~The kappa are renowned for farting. Despite their fondness for their own farts, they don't care for anyone else's.~";
        'hatagoya', 'inn':
          "~There's a hatagoya in the nearby town.~";
        'hidemochi', 'nagatane', 'yoshimoro':
          "~You'll find him working in one of the fields.~";
        'him', 'himself', 'elder', 'man', 'yukimoto':
          "~I'm the village elder. They call me that because I'm the oldest in the village.~ He gives a little chuckle at the joke at his own expense.";
        'house', 'houses', 'hut', 'huts', 'village':
          "~My memory is not what it used to be, so I can't remember who lives in what part of the village, but the villagers know. Ask them.~";
        'kami', 'dead', 'spirits':
          "~The kami are the spirits of the dead. The Shinto priest is the custodian and protector of the kami.~";
        'kappa', 'creature', 'monster':
          self.asked_about_kappa = 1;
          "~A kappa has been terrorising the village by stealing food and letting off farts. Last night, it stole one of the villager's children. The villagers are too scared to confront the kappa themselves, as they're scared of being lured into the water and getting drowned and eaten. You can lure the kappa out of the water by exposing your backside, then you can kill it, but you'll need to know its weaknesses. The Shinto priest can tell you about those.~";
        'me', 'myself', 'self', 'samurai', 'haruko', 'tadamori':
          "~I can see that you're a samurai, so I hope you can help us to find the stolen child and kill the kappa.~";
        'mother', 'sumini', 'yono':
          "~You'll find her working in one of the fields.~";
        'priest', 'shinshoku':
          self.asked_about_priest = 1;
          "~The priest lives in the grounds of the Shinto shrine, but you must follow the correct ritual to summon him.~";
        'ritual', 'rituals':
          self.asked_about_ritual = 1;
          "~There are three steps in the ritual. Firstly, you must purify yourself by washing at the temizuya so that you can enter the haiden. Secondly, you must make an offering by leaving a donation in the donation box at the haiden. Thirdly, you must summon the priest by ringing the bell to announce your arrival, then approach the honden. When you get to the honden, you must bow twice, clap twice and bow once more.~";
        'river':
          "~The river is to the west.~";
        'shinto':
          "~Shinto is the traditions and ceremonies we practice to worship the kami. It's like a religion, but it's not really a religion. If you want to know more, I can tell you about the shrine, the priest and the rituals.~";
        'shrine', 'jinja':
          "~The shrine is south of the village. Follow the path back towards the town and turn down the first branch to the south. You can't miss it.~";
        'swamp':
          "~There's a swamp on the other side of the river, but you need to cross the river to get there and I wouldn't advise that unless you want to get eaten by the kappa.~";
        'town':
          "~Didn't you just come from there this morning?~";
        default:
          "~They say I'm a wise man, but that's beyond my wisdom.~";
      }
    Talk:
      if (self has proper)
        "~My eyesight is failing, so I don't get out much nowadays. The villagers can help you. You should ask them about their crops, their drinks and their huts. Although this may not seem relevant, I'm sure it will help you in your search.~";
      give self proper;
      "~Welcome, samurai. Nagatane told me you were coming. We are deeply indebted to you. My name is Yukimoto. I'm the village elder. You can ask me about many things, but I may not always have an answer for you. However, the villagers are generally very friendly. I'd suggest you talk to them to find out their name, then ask them about the crops they grow, the drinks they like and the huts where they live. You'll find that they all grow different crops, have a different favourite drink and live in a different part of the village.~";
  ],
  asked_about_cucumber 0,
  asked_about_kappa 0,
  asked_about_priest 0,
  asked_about_ritual 0,
has animate;

!========================================
! Room 14: Torii
!========================================
Object room14 "Torii"
with
  description
  [;
    "You're at a torii, a gate that stands at the entrance to a sacred area in and around a Shinto shrine. Its distinctive form is easily recognised by all Japanese people. You can go south to pass through the torii and enter the hallowed grounds. Otherwise you can go north to return to the path.";
  ],
  n_to room10,
  s_to room15,
has light;

!----------------------------------------
! Sacred forest (floating object)
!----------------------------------------
Object "sacred forest"
with
  parse_name
  [ i;
    while (NextWord() == 'sacred' or 'forest' or 'area' or 'tree' or 'trees' or 'leaf' or 'leaves')
      i++;
    return i;
  ],
  description "The sacred forest is the dwelling place of the kami. For this reason, it's forbidden to remove even one fallen leaf from the forest, let alone cut down any of its trees.",
  found_in
  [;
    if (location == room14 or room15 or room16 or room17 or room18 or room19 or room20)
      rtrue;
  ],
has scenery;

!----------------------------------------
! Kami (floating object)
!----------------------------------------
Object "kami"
with
  name 'kami',
  description
  [;
    "The kami are the deities, divinities and spirits of dead people that are venerated in Shinto belief. However, you can't see them, only feel their presence.";
  ],
  before
  [;
    Pray, Talk:
      "Only a priest can communicate with the kami.";
  ],
  found_in
  [;
    if (location == room14 or room15 or room16 or room17 or room18 or room19 or room20)
      rtrue;
  ],
has scenery;

!----------------------------------------
! Torii (floating object)
!----------------------------------------
Object "torii"
with
  parse_name
  [ i;
    while (NextWord() == 'torii' or 'gate' or 'entrance' or 'two' or 'solid' or 'wood' or 'wooden' or 'post' or 'posts' or 'structure')
      i++;
    return i;
  ],
  description "The torii consists of two solid wooden posts topped by a curved lintel called a kasagi. Below this is a horizontal beam called a nuki. The whole structure appears to have been stained red, but this has been weathered to expose the wood beneath.",
  found_in room14 room15,
has scenery;

!----------------------------------------
! Kasagi (floating object)
!----------------------------------------
Object "kasagi"
with
  name 'kasagi' 'curved' 'lintel',
  description "The kasagi sits atop the posts and curves upwards at each end.",
  found_in room14 room15,
has scenery;

!----------------------------------------
! Nuki (floating object)
!----------------------------------------
Object "nuki"
with
  name 'nuki' 'horizontal' 'beam',
  description "The nuki supports and separates the two posts, just below the kasagi.",
  found_in room14 room15,
has scenery;

!========================================
! Room 15: North Sando
!========================================
Object room15 "North Sando"
with
  description "You're at the northern end of the sando (or worshipper's path) that leads south to the shrine. It's paved with flagstones and marked by toro (or stone lanterns) at regular intervals with the sacred forest beyond. The torii is to your north and a temizuya is adjacent to the eastern side of the path.",
  n_to room14,
  s_to room16,
  e_to "The temizuya blocks that way.",
  w_to "You should not leave the path within the sacred grounds, as the forest is the dwelling place of the kami.",
  before
  [;
    Hint:
      if (yukimoto.asked_about_ritual == 0)
        print_ret (string)TRY_TALKING_TO_VILLAGE_ELDER;
      if (temizuya hasnt general)
        print_ret (string)REMEMBER_RITUAL;
  ],
has light;

!----------------------------------------
! Sando (floating object)
!----------------------------------------
Object "sando"
with
  parse_name
  [ i;
    while (NextWord() == 'sando' or 'worshipper^s' or 'path' or 'pathway' or 'walkway' or 'flagstone' or 'flagstones')
      i++;
    return i;
  ],
  description "The sando is a walkway that leads to a shrine. This one goes from north to south and is paved with flagstones.",
  found_in room15 room16,
has scenery;

!----------------------------------------
! Toro (floating object)
!----------------------------------------
Object "toro"
with
  parse_name
  [ i;
    while (NextWord() == 'toro' or 'decorative' or 'stone' or 'lantern' or 'lanterns')
      i++;
    return i;
  ],
  description "The toro are decorative stone lanterns that mark the edge of the sando during the night. They aren't currently lit, as it's daytime.",
  before
  [;
    Pull, Push, Take:
      "The toro are carved from stone to form a permanent fixture beside the sando. They cannot be moved.";
  ],
  found_in room15 room16,
has pluralname scenery;

!----------------------------------------
! Temizuya
!----------------------------------------
Object temizuya "temizuya" room15
with
  parse_name
  [ i;
    while (NextWord() == 'temizuya' or 'chozuya' or 'small' or 'pavilion' or 'roofed' or 'structure')
      i++;
    return i;
  ],
  description "The temizuya (sometimes called chozuya) is a small pavilion for ceremonial purification. It consists of a stone basin, with running water, beneath a roofed structure. It's here that you wash yourself before entering the haiden.",
has scenery;

!----------------------------------------
! Stone basin
!----------------------------------------
Object "stone basin" room15
with
  name 'stone' 'basin' 'running' 'water',
  description "It's the stone basin in the temizuya where you wash yourself before entering the haiden.",
has scenery;

!========================================
! Room 16: South Sando
!========================================
Object room16 "South Sando"
with
  description "You're at the southern end of the sando (or worshipper's path) that continues south through the haiden. Otherwise, you can follow it north to leave the sacred grounds. The sando is paved with flagstones and marked by stone lanterns at regular intervals with the sacred forest beyond. A small pavilion adjoins the western side of the path.",
  n_to room15,
  s_to
  [;
    if (temizuya hasnt general)
      "You cannot proceed any further until you've cleansed yourself of any bad spirits.";
    else
      return room17;
  ],
  e_to "You should not leave the path within the hallowed grounds, as the forest is the dwelling place of the kami.",
  w_to "The pavilion blocks that way.",
  before
  [;
    Hint:
      if (yukimoto.asked_about_ritual == 0)
        print_ret (string)TRY_TALKING_TO_VILLAGE_ELDER;
      if (temizuya hasnt general)
        print_ret (string)REMEMBER_RITUAL;
  ],
has light;

!----------------------------------------
! Haiden (floating object)
!----------------------------------------
Object "haiden"
with
  parse_name
  [ i;
    while (NextWord() == 'haiden' or 'large' or 'wood' or 'wooden' or 'structure' or 'pillar' or 'pillars' or 'tiled' or 'roof' or 'open-walled' or 'hall' or 'of' or 'worship')
      i++;
    return i;
  ],
  description "The haiden is a large wooden structure consisting of wooden pillars holding up a tiled roof.",
  found_in room16 room17,
has scenery;

!----------------------------------------
! Pavilion
!----------------------------------------
Object "pavilion" room16
with
  parse_name
  [ i;
    while (NextWord() == 'pavilion' or 'small' or 'wood' or 'wooden' or 'structure' or 'tiled' or 'roof')
      i++;
    return i;
  ],
  description "It's a small wooden structure with a tiled roof that protects a noticeboard from the elements. The noticeboard is covered in ema.",
has scenery;

!----------------------------------------
! Noticeboard
!----------------------------------------
Object "noticeboard" room16
with
  name 'noticeboard',
  description "It's covered in ema.",
has scenery;

!----------------------------------------
! Ema
!----------------------------------------
Object "ema" room16
with
  parse_name
  [ i;
    while (NextWord() == 'ema' or 'small' or 'wood' or 'wooden' or 'plaque' or 'plaques' or 'prayer' or 'prayers' or 'wish' or 'wishes')
      i++;
    return i;
  ],
  description
  [;
    print "The ema are small wooden plaques with prayers or wishes written on them. In due course, they'll be ritually burned at a special event.";
    if (self hasnt general)
      print " Perhaps you should read them before they're burned.";
    "";
  ],
  before
  [;
    Read:
      give self general;
      "There are a few that offer blessings to dead relatives or pray for a good harvest, but there are a disturbing number that plead to the kami for protection from the kappa.";
    Take:
      "Taking the ema would be disrespectful to the people who wrote on them, so you think it better to leave them alone.";
  ],
has pluralname scenery;

!========================================
! Room 17: Haiden
!========================================
Object room17 "Haiden"
with
  description "You're beneath the haiden, the open-walled hall of worship of the shrine. It provides a space for ceremonies and for worshiping the kami. A shimenawa is suspended from the rafters, along with a large brass bell. You can exit to the north and south.",
  n_to room16,
  s_to room18,
  before
  [;
    Hint:
      if (yukimoto.asked_about_ritual == 0)
        print_ret (string)TRY_TALKING_TO_VILLAGE_ELDER;
      if (bell hasnt general || box hasnt general)
        print_ret (string)REMEMBER_RITUAL;
  ],
has light;

!----------------------------------------
! Shimenawa
!----------------------------------------
Object "shimenawa" room17
with
  name 'shimenawa' 'special' 'rope' 'hemp',
  description "The shimenawa is a special rope that's woven from hemp and tapers towards each end. It's suspended below the rafters of the haiden to denote its sanctity or purity.",
  before
  [;
    Take:
      "Only a priest should take down the shimenawa, and you're not a priest.";
  ],
has scenery;

!----------------------------------------
! Rafters
!----------------------------------------
Object "rafters" room17
with
  name 'rafters',
  description "Apart from supporting the roof, a shimenawa is suspended from them.",
has pluralname scenery;

!----------------------------------------
! Bell
!----------------------------------------
Object bell "bell" room17
with
  name 'heavy' 'brass' 'bell',
  description "It's a heavy brass bell that's used to announce your approach to the honden and call the kami so they can look down from above and listen to your prayers.",
  before
  [;
    Attack:
      give self general;
      "BONG!";
  ],
has static;

!----------------------------------------
! Donation box
!----------------------------------------
Object box "donation box" room17
class OpenableContainer
with
  name 'donation' 'box' 'locked' 'slot',
  description "It's a locked box with a slot in the top so that people can insert a coin to make a donation.",
  before
  [;
    Receive:
      if (noun ~= coin)
        print_ret (The)noun, " won't fit in the slot.";
      if (self has general)
        "You've already made a donation. Your generosity is appreciated, but let's not overdo it.";
      remove coin;
      give self general;
      "You insert the coin in the slot and hear a clunk as it hits the bottom of the box. It doesn't sound like there are any other coins in there.";
    Take:
      "It's nailed down to prevent dishonest people taking it. Now you wouldn't be a dishonest person, would you?";
  ],
has container open static;

!========================================
! Room 18: North of Honden
!========================================
Object room18 "North of Honden"
with
  description "You find yourself outside the honden, the most sacred building of the shrine. It's here that the kami are enshrined, hence it's closed to the general public. A pair of stone lion-dogs are stationed at each side of the entrance and a path surrounds the honden to the east and west inside the tamagaki. When you've finished praying or paying your respects to the kami, you can leave the shrine to the north.",
  n_to room17,
  s_to "The honden is out of bounds to the general public.",
  before
  [;
    Bow:
      if (self.state == 5)
        rfalse;
      print "You bow to the kami.^";
      if (bell hasnt general || box hasnt general)
        rtrue;
      if (self.state == 0 or 1 or 4)
        self.state++;
      else
        self.state = 0;
      if (self.state == 5)
      {
        move priest to self;
        "^A priest appears before you. ~Who summons the kami?~";
      }
      rtrue;
    Clap:
      if (self.state == 5)
        rfalse;
      print "You clap to the kami.^";
      if (bell hasnt general)
        rtrue;
      if (self.state == 2 or 3)
        self.state++;
      else
        self.state = 0;
      rtrue;
    Go:
      if (selected_direction == e_to or w_to)
      {
        print (string)FOLLOW_PATH;
        if (priest in self && priest.asked_about_kappa_1 == 1)
        {
          move priest to room19;
          print " The priest follows you.";
        }
        print "^^";
        PlayerTo(room19);
        rtrue;
      }
    Hint:
      if (priest in nothing && yukimoto.asked_about_ritual == 0)
        print_ret (string)TRY_TALKING_TO_VILLAGE_ELDER;
      if (priest in nothing)
        print_ret (string)REMEMBER_RITUAL;
      if (priest in self && priest hasnt general)
        "Try talking to the priest.";
      if (priest in self && priest.asked_about_kappa_1 == 0)
        print_ret (string)TRY_ASKING_PRIEST_ABOUT, "kappa.";
      if (priest in self)
        "Try following the path east or west around the honden.";
  ],
  state 0,
has light;

!----------------------------------------
! Honden (floating object)
!----------------------------------------
Object "honden"
with
  parse_name
  [ i;
    while (NextWord() == 'honden' or 'small' or 'wooden' or 'building' or 'roof' or 'v-shaped' or 'extensions' or 'ridge' or 'chigi' or 'apex' or 'short' or 'horizontal' or 'logs' or 'katsuogi')
      i++;
    return i;
  ],
  description "The honden is a small wooden building with a distinctive roof design. The front and rear of the roof has V-shaped extensions to the ridge called chigi. The ends of the chigi are cut horizontally, indicating that a female diety is enshrined inside the honden. The apex of the roof has short horizontal logs called katsuogi spaced about 1 metre apart.",
  found_in room18 room19,
has scenery;

!----------------------------------------
! Lion-dog statues
!----------------------------------------
Object "lion-dog statues" room18
with
  parse_name
  [ i;
    while (NextWord() == 'stone' or 'lion-dog' or 'lion-dogs' or 'lion' or 'lions' or 'dog' or 'dogs' or 'statue' or 'statues')
      i++;
    return i;
  ],
  description "These statues protect the space around the kami from evil. There are two of them. The one on the east side has its mouth open and is known as a shishi. The one on the west side has its mouth closed, and is known as a komainu.",
has scenery;

!----------------------------------------
! Shishi
!----------------------------------------
Object "shishi" room18
with
  name 'shishi',
  description "The shishi is a lion-dog statue with its mouth open. This is supposedly because it's pronouncing the first letter of the sanskrit alphabet and represents the beginning of all things.",
has scenery;

!----------------------------------------
! Komainu
!----------------------------------------
Object "komainu" room18
with
  name 'komainu',
  description "The komainu is a lion-dog statue with its mouth closed. This is supposedly because it's pronouncing the last letter of the sanskrit alphabet and represents the end of all things.",
has scenery;

!----------------------------------------
! Tamagaki (floating object)
!----------------------------------------
Object "tamagaki"
with
  name 'tamagaki' 'sacred' 'fence',
  description "The tamagaki is the sacred fence that encloses the honden. This sets it off from the outside world and marks the border between the sacred and the profane.",
  before
  [;
    Climb:
      "Climbing the tamagaki is forbidden.";
  ],
  found_in room18 room19,
has scenery;

!----------------------------------------
! Path (floating object)
!----------------------------------------
Object "path"
with
  name 'path' 'flagstone' 'flagstones',
  description "The path goes east and west around the outside of the honden. It's made from the same flagstones as the sando, only smaller.",
  found_in room18 room19,
has scenery;

!----------------------------------------
! Priest (shinshoku)
!----------------------------------------
Object priest "priest"
with
  parse_name
  [ i;
    while (NextWord() == 'priest' or 'shinshoku' or 'kannushi' or 'elderly' or 'man' or 'long' or 'white' or 'hair' or 'pony' or 'tail' or 'bushy' or 'eyebrows' or 'face')
      i++;
    return i;
  ],
  description "He's an elderly man with very long white hair tied in a pony tail. He has big bushy eyebrows and a serious, though kindly, face. He wears shozoku clothing and carries an onusa.",
  life
  [;
    Ask:
      switch (second)
      {
        'carving', 'pillar':
          if (self in room18)
            "~The pillar is to the south of the honden.~";
          else
            "He points to the pillar. ~You can see it for yourself. You don't need me to describe it.~";
        'clothes', 'clothing', 'shozoku', 'vestments':
          "He looks down at his clothing. ~These are the vestments worn by Shinto priests.~";
        'cucumber', 'cucumbers', 'kyuri':
          if (pillar hasnt general)
            "~Are you hungry?~";
          else
            "~I don't know where you'll find any cucumbers. You'll have to work that out for yourself. The farmers in the village may be able to help.~";
        'farmer', 'farmers', 'peasant', 'peasants', 'villager', 'villagers':
          "~The farmers live in the village.~";
        'him', 'himself', 'priest', 'shinshoku':
          "~Shinshoku means 'god's employee' and that's exactly what I am. I maintain the grounds and protect the kami in the honden.~";
        'honden':
          "~The honden behind us is where the kami are enshrined, so it's the most sacred part of the shrine and out of bounds to the public...including samurai.~";
        'kami':
          "~The kami are the spirits of dieties and other dead people.~";
        'kappa', 'creature', 'monster':
          if (location == room18)
          {
            self.asked_about_kappa_1 = 1;
            "He closes his eyes for a moment, then says, ~I have consulted with the kami. The kappa is a dangerous creature, for it'll try to remove your shirikodama. If it's successful, you'll die. If you intend to confront the kappa, then you must pass a test to prove that you're worthy. If you wish to take the test, go to the pillar south of the honden and ask me about the test. Otherwise, you're free to pay your respects to the kami.~";
          }
          if (pillar hasnt general)
            "~You must first pass the test, then ask me again.~";
          self.asked_about_kappa_2 = 1;
          "~The kappa has two weaknesses. Firstly, it's extremely polite. It has a bowl in its head that retains its life-giving water. If you bow, it'll bow back, thus spilling the water from the bowl and losing its strength. Secondly, it has a fondness for cucumbers. You can use this knowledge to defeat the kappa. Good luck, samurai. If you have any further questions, I'll wait for you here.~";
        'kataginu', 'kimono', 'hakama', 'waraji':
          "~I can see that you're a samurai. Other than that, I have no interest in your clothing.~";
        'me', 'myself', 'self', 'samurai', 'haruko', 'tadamori':
          "~I can see that you're a samurai, so I trust that you're an honorable man and will respect the sanctity of this shrine.~";
        'onusa':
          "~This is a wand used in purification rituals.~ He grins. ~I use it to keep the flies away.~";
        'river':
          "~When the water in the river is clean, it has the power to cleanse, but when it is murky, it may conceal evil.~";
        'shinto', 'shrine', 'jinja':
          "~The jinja is a Shinto shrine, but surely you know that. It's the resting place of the kami and I'm its shinshoku.~";
        'shirikodama':
          "~The kappa have an unhealthy interest in a person's anus, for it's there that each person has a special spiritual organ called the shirikodama. The kappa will reach into your anus with its hand to steal your shirikodama or suck it out. If it's successful, you'll no doubt die.~";
        'swamp':
          "~The swamp is a confusing labyrinth to those that don't know its secrets.~";
        'test', 'courtyard', 'puzzle', 'tile', 'tiles':
          if (location == room18)
            "~Not yet.~";
          if (pillar has general)
            "~You've completed the test.~";
          print "~The courtyard contains four kami. Each kami has its own territory. The size of its territory is shown here.~ He points to the pillar. ~In order to maintain harmony, you must separate all the kami by building a wall between their territories. You do this by placing tiles on the flagstones in the courtyard. The tiles represent the wall. The wall must be continuously connected horizontally or vertically, but cannot contain any rectangular groups of tiles that are 2x2 or larger. The uncovered flagstones represent the kami territories. These can be any shape, but each territory must be continuously connected horizontally or vertically and be the same size as shown on the pillar. You cannot place tiles on the numbered flagstones, as these are part of the kami's territory.~";
          if (tiles in nothing)
          {
            move tiles to player;
            print " The priest hands you a pile of tiles. ~Good luck, samurai. Return to me when you're finished.~";
          }
          "";
        'village':
          "~The village is north of here.~";
        default:
          "~You ask about something of which I have no knowledge.~";
      }
    Talk:
      give self general;
      "~I'm the priest, or shinshoku, responsible for this jinja and hold ceremonies here. If I can help you with anything, just ask.~";
  ],
  before
  [;
    Bow:
      "He bows back. ~Welcome samurai. How can I help you?~";
  ],
  add_to_scope shozoku onusa,
  asked_about_kappa_1 0,
  asked_about_kappa_2 0,
has animate;

!----------------------------------------
! Shozoku
!----------------------------------------
Object shozoku "shozoku"
with
  name 'shozoku' 'traditional' 'vestments',
  description
  [;
    "These are the traditional vestments worn by Shinto priests and are quite distinctive in their design. They're similar to the official garments worn at the Imperial court, showing the close connection between kami worship and the figure of the Emperor.";
  ],
has scenery;

!----------------------------------------
! Onusa
!----------------------------------------
Object onusa "onusa"
with
  parse_name
  [ i;
    while (NextWord() == 'onusa' or 'wand' or 'shide' or 'white' or 'paper' or 'streamers')
      i++;
    return i;
  ],
  description
  [;
    "It's a wand decorated with shide, or white paper streamers. It's used during Shinto purification rituals.";
  ],
has scenery;

!========================================
! Room 19: South of Honden
!========================================
Object room19 "South of Honden"
with
  description "You're at the rear of the honden. There's no entry or exit to the honden from here, only a path around it to the east and west. There's also a pillar in the path and a courtyard surrounded by a bamboo fence to the south.",
  s_to
  [;
    room20.x = 2;
    room20.y = 0;
    return room20;
  ],
  before
  [;
    Go:
      if (selected_direction == e_to or w_to)
      {
        print (string)FOLLOW_PATH, "^^";
        PlayerTo(room18);
        rtrue;
      }
    Hint:
      if (priest in nothing or room18)
        print_ret (string)ASK_FOR_HINT_NORTH_OF_HONDEN;
      if (tiles in nothing)
        print_ret (string)TRY_ASKING_PRIEST_ABOUT, "test.";
      if (pillar hasnt general)
        "Try completing the priest's test.";
      if (priest.asked_about_kappa_2 == 0)
        print_ret (string)TRY_ASKING_PRIEST_ABOUT, "kappa.";
  ],
  after
  [ i count;
    Go:
      if (selected_direction == n_to && priest in self && tiles in player && tiles.number == 0)
      {
        <Look>;
        for (i=0, count=0:i<25:i++)
          if (yard_now->i ~= yard_end->i)
            count++;
        print "^The priest says, ~I see that you've finished placing all the tiles. Give me a moment while I check them.~^^He returns in a few minutes";
        if (count > 0)
          ". ~Unfortunately, you placed ", count, " of the tiles incorrectly. I'm a fair man, so I'll let you correct your errors. If the test was unclear, you can ask me about it again.~";
        move tiles to limbo;
        for (i=0:i<25:i++)
          yard_now->i = yard_start->i;
        give pillar general;
        " with all the tiles under his arm. ~You placed all the tiles correctly so that the kami were separated from each other. You've proved that you're worthy to deal with tha kappa, so you can now ask me about it when you're ready.~";
      }
  ],
has light;

!----------------------------------------
! Courtyard
!----------------------------------------
Object "courtyard" room19
with
  name 'courtyard',
  description "You can see it clearer if you go there.",
has scenery;

!----------------------------------------
! Stone pillar
!----------------------------------------
Object pillar "stone pillar" room19
with
  name 'stone' 'pillar',
  description
  [;
    print "It's a large stone pillar with a carving in the face opposite the entry to the courtyard.";
    if (carving hasnt general)
      " You should probably examine the carving, as it may be significant in some way.";
    "";
  ],
has scenery;

!----------------------------------------
! Carving
!----------------------------------------
Object carving "carving" room19
with
  name 'carving',
  description
  [;
    give self general;
    font off;
    print ".4..3^..2..^.....^.....^....5^";
    font on;
  ],
has scenery;

!----------------------------------------
! Bamboo fence
!----------------------------------------
Object "bamboo fence"
with
  name 'bamboo' 'fence',
  description
  [;
    print "It marks the border of the courtyard.^";
  ],
  found_in room19 room20,
has scenery;

!----------------------------------------
! Pile of tiles
!----------------------------------------
Object tiles "pile of tiles"
with
  name 'pile' 'of' 'tiles',
  description
  [;
    print "It's the terra cotta tiles that the priest gave you. There's ", self.number, " tile";
    if (self.number ~=1)
      print "s";
    " left in the pile.";
  ],
  before
  [;
    Count:
      print "You're carrying ", self.number, " tile";
      if (self.number ~= 1)
        print "s";
      ".";
    Drop:
      if (location ~= room20)
        "Don't drop them here. You'll need them in the courtyard.";
      else
        "You can only drop one at a time.";
  ],
  number 11,
  add_to_scope tile,
has;

!----------------------------------------
! Tile
!----------------------------------------
Object tile "tile"
with
  name 'tile',
  description "It's a large terra cotta tile.",
  before
  [;
    Drop:
      if (location ~= room20)
        "Don't drop it here. You'll need it in the courtyard.";
      if (yard_now->room20.offset == 6)
        "There's already a tile here.";
      if (yard_now->room20.offset > 0)
        "You can't drop tiles on the carved flagstones, as that marks where the kami are located.";
      tiles.number--;
      yard_now->room20.offset = 6;
      "You drop a tile on the blank flagstone.";
    Take:
      if (yard_now->room20.offset ~= 6)
        "There's no tile on this flagstone.";
      tiles.number++;
      yard_now->room20.offset = 0;
      "You pick up the tile and add it to your pile.";
  ],
has scenery;

!========================================
! Room 20: Courtyard
!========================================
Object room20 "Courtyard"
with
  description
  [ count;
    self.offset = self.x + self.y * 5;
    print "You're in a small courtyard to the south of the honden. It's paved in flagstones, each about one metre square. The flagstone you're standing on ";
    switch (yard_now->self.offset)
    {
      0: print "is blank";
      2: print "has a '2' carved into it";
      3: print "has a '3' carved into it";
      4: print "has a '4' carved into it";
      5: print "has a '5' carved into it";
      6: print "has a tile on it";
    }
    print ". You can step onto the adjacent flagstones to the ";
    !Step 1: Count number of exits
    count = 0;
    if (self.y > 0)
      count++;
    if (self.y < 4)
      count++;
    if (self.x < 4)
      count++;
    if (self.x > 0)
      count++;
    !Step 2: Print exits
    if (self.y > 0)
    {
      count--;
      print "north";
      if (count == 1)
        print " and ";
      if (count > 1)
        print ", ";
    }
    if (self.y < 4)
    {
      count--;
      print "south";
      if (count == 1)
        print " and ";
      if (count > 1)
        print ", ";
    }
    if (self.x < 4)
    {
      count--;
      print "east";
      if (count == 1)
        print " and ";
      if (count > 1)
        print ", ";
    }
    if (self.x > 0)
    {
      count--;
      print "west";
      if (count == 1)
        print " and ";
      if (count > 1)
        print ", ";
    }
    if (self.offset == 2)
      print ", or leave the courtyard to the north";
    ".";
  ],
  n_to
  [;
    if (self.offset == 2)
      return room19;
    if (self.y == 0)
      print_ret (string)BAMBOO_FENCE_PREVENTS_YOU, "north.";
    self.y--;
    <<Look>>;
  ],
  s_to
  [;
    if (self.y == 4)
      print_ret (string)BAMBOO_FENCE_PREVENTS_YOU, "south.";
    self.y++;
    <<Look>>;
  ],
  e_to
  [;
    if (self.x == 4)
      print_ret (string)BAMBOO_FENCE_PREVENTS_YOU, "east.";
    self.x++;
    <<Look>>;
  ],
  w_to
  [;
    if (self.x == 0)
      print_ret (string)BAMBOO_FENCE_PREVENTS_YOU, "west.";
    self.x--;
    <<Look>>;
  ],
  before
  [;
    Hint:
      if (priest in nothing or room18)
        print_ret (string)ASK_FOR_HINT_NORTH_OF_HONDEN;
      if (priest in room19 && tiles in nothing)
        "Ask for a HINT south of the honden.";
      if (pillar hasnt general && carving hasnt general)
        "Examine the carving on the pillar and compare this with the numbers carved on the flagstones in the courtyard.";
      if (pillar hasnt general)
        "The courtyard has 25 flagstones. If you add up the numbers on the carved flagstones, you'll see that 14 flagstones need to be left blank and 11 flagstones need to have tiles placed on them as per the priest's instructions.";
  ],
  offset 0,
  x 2,
  y 0,
has light;

!----------------------------------------
! Courtyard
!----------------------------------------
Object "courtyard" room20
with
  name 'courtyard',
  description
  [ x y offset;
    print "The flagstones in the courtyard are laid out as follows:^";
    font off;
    offset = 0;
    for (y=0:y<5:y++)
    {
      for (x=0:x<5:x++)
      {
        switch (yard_now->offset)
        {
          0: print ".";
          2: print "2";
          3: print "3";
          4: print "4";
          5: print "5";
          6: print "#";
        }
        offset++;
      }
      print "^";
    }
    font on;
  ],
has scenery;

!----------------------------------------
! Flagstone
!----------------------------------------
Object "flagstone" room20
with
  name 'flagstone',
  description
  [;
    room20.offset = room20.x + room20.y * 5;
    print "The flagstone you're standing on ";
    switch (yard_now->room20.offset)
    {
      0: print "is blank";
      2: print "has a '2' carved into it";
      3: print "has a '3' carved into it";
      4: print "has a '4' carved into it";
      5: print "has a '5' carved into it";
      6: print "has a tile on it";
    }
    ".";
  ],
has scenery;

!----------------------------------------
! Number
!----------------------------------------
Object "number" room20
with
  name ,
  parse_name
  [ i;
    while (NextWord() == 'number' or '2//' or '3//' or '4//' or '5//' or 'two' or 'three' or 'four' or 'five')
      i++;
    return i;
  ],
  description
  [;
    room20.offset = room20.x + room20.y * 5;
    if (yard_now->room20.offset > 0 && yard_now->room20.offset < 6)
      "The numbers are carved into the flagstones.";
    else
      "There's no number on this flagstone.";
  ],
has scenery;

!========================================
! Room 21: Dirt Path
!========================================
Object room21 "Dirt Path"
with
  description "The path continues to meander through the trees from east to west. It's very narrow here and the branches of the surrounding trees brush your head and shoulders as you pass by.",
  e_to room11,
  w_to room22,
has light;

!========================================
! Room 22: Dirt Path
!========================================
Object room22 "Dirt Path"
with
  description "You've reached a turn in the path. You can hear a river to the west, but the trees are too thick to go that way. You can follow the dirt path to the north or east.",
  n_to room23,
  e_to room21,
  before
  [;
    Listen:
      if (noun == nothing)
        print_ret (string)YOU_HEAR_RUNNING_WATER_TO_WEST;
  ],
has light;

!========================================
! Room 23: Dirt Path
!========================================
Object room23 "Dirt Path"
with
  description "The path continues to zig zag through the trees. You can follow it to the north or south, but a branch to the west towards the sound of the river is more enticing.",
  n_to room25,
  s_to room22,
  w_to room24,
  before
  [;
    Listen:
      if (noun == nothing)
        print_ret (string)YOU_HEAR_RUNNING_WATER_TO_WEST;
  ],
has light;

!========================================
! Room 24: East River Bank
!========================================
Object room24 "East River Bank"
with
  description "You're on the east bank of a river. There's a large pool of water here that appears to be formed by a rock dam a little further downstream to the south. The water flows over the rock dam and into the rapids beyond. If you're game, you can wade through the river to the west, but a safer alternative is to follow the path through the forest to the east.",
  e_to room23,
  w_to
  [;
    if (kappa in nothing && sign hasnt general)
      "You'd be well advised to read the sign.";
    if (kappa in nothing)
      "Remember what it said on the sign?";
    if (kappa hasnt general)
      "The kappa quickly jumps in front of you. It is amazingly fast for such an awkward-looking creature. ~Where do you think you're going samurai?~";
    if (kappa.attacked == 0)
      "You should kill the kappa before it regains its strength.";
    if (kappa.asked_about_child == 0)
      "Aren't you forgetting something? What about the child?";
    if (hidemochi.asked_about_cucumber_2 == 0)
      "You have no reason to cross the river yet.";
    print (string)HOLD_SWORDS_ABOVE_HEAD;
    return room34;
  ],
  before
  [;
    Hint:
      if (kappa in nothing && yukimoto.asked_about_kappa == 0)
        print_ret (string)TRY_TALKING_TO_VILLAGE_ELDER;
      if (kappa in nothing)
        "Remember what the village elder told you about luring the kappa out of the water.";
      if (kappa hasnt general)
        "Remember what the priest told you about the kappa's weaknesses.";
      if (kappa.attacked == 0)
        "Now's your chance! Attack while the kappa is at its weakest.";
      if (kappa.asked_about_child == 0)
        "Try asking the kappa about the child.";
      if (hidemochi.asked_about_cucumber_2 == 0)
        "Try asking all the villagers about the cucumber. One of them is sure to know where to find one.";
      if (room34 hasnt visited)
        "You can cross the river now that the kappa is in a weakened state and you know your objective.";
      if (cucumber has scenery)
        "Find a cucumber!";
      if (kappa notin limbo)
        "Give the cucumber to the kappa.";
    Listen:
      if (noun == nothing)
        "You can hear the rapids downstream of the dam.";
    Swim:
      if (noun == nothing)
        <<Go FAKE_W_OBJ>>;
  ],
has light;

!----------------------------------------
! East river bank
!----------------------------------------
Object "river bank" room24
with
  name ,
  parse_name
  [ nw i flag;
    nw = NextWord();
    while (nw == 'east' or 'river' or 'bank' or 'waterline')
    {
      i++;
      if (nw == 'river')
        flag++;
      nw = NextWord();
    }
    if (i == flag)
      return 0;
    return i;
  ],
  description "The east bank of the river has been carved through solid rock over thousands of years. This part of the bank meets the waterline and has been well trodden by many feet when the owners of those feet came to collect water.",
has scenery;

!----------------------------------------
! River (floating object)
!----------------------------------------
Object "river"
with
  name 'river',
  description "This is probably where the villagers get the water to water their crops. The river is quite wide, so you wouldn't be able to jump across.",
  before
  [;
    Swim, Enter:
      if (self in room24)
        <<Go FAKE_W_OBJ>>;
      else
        <<Go FAKE_E_OBJ>>;
  ],
  found_in room24 room34,
has scenery;

!----------------------------------------
! Pool of water (floating object)
!----------------------------------------
Object "pool of water"
with
  name 'large' 'pool' 'of' 'water',
  description
  [;
    print "The water appears to be waist deep, but it's quite murky. Be careful. This ";
    if (kappa in nothing)
      print "could be";
    else
      print "is";
    " where the kappa hides out.";
  ],
  before
  [;
    Swim, Enter:
      if (self in room24)
        <<Go FAKE_W_OBJ>>;
      else
        <<Go FAKE_E_OBJ>>;
  ],
  found_in room24 room34,
has scenery;

!----------------------------------------
! Rock dam
!----------------------------------------
Object "rock dam" room24
with
  parse_name
  [ i;
    while (NextWord() == 'rock' or 'rocks' or 'dam' or 'downstream' or 'boulder' or 'boulders' or 'steep' or 'banks')
      i++;
    return i;
  ],
  description "It's hard to see through the trees, but it looks like the dam has been formed at the narrowest part of the river by pushing large boulders down the steep banks. You can't get to it because of the dense trees and the steepness of the banks beside the dam.",
has scenery;

!----------------------------------------
! Rapids
!----------------------------------------
Object "rapids" room24
with
  name 'rapids',
  description "You can't see the rapids from here, but you can certainly hear them.",
has scenery;

!----------------------------------------
! Sign
!----------------------------------------
Object sign "sign" room24
with
  name 'sign',
  description
  [;
    print "You're surprised to see a sign here, as peasants are usually illiterate.";
    if (self hasnt general)
      print " Perhaps you should read it.";
    "";
  ],
  before
  [;
    Read:
      give self general;
      "It says, 'DANGER: BEWARE OF KAPPA - NO SWIMMING'.";
  ],
has static;

!----------------------------------------
! Kappa
!----------------------------------------
Object kappa "kappa"
with
  parse_name
  [ i;
    while (NextWord() == 'kappa' or 'small' or 'creature' or 'monster' or 'oversized' or 'frog' or 'slimy' or 'green' or 'skin' or 'beak-like' or 'nose' or 'webbed' or 'feet' or 'turtle' or 'turtle-like' or 'shell' or 'bowl' or 'bowl-like' or 'depression' or 'head' or 'tuft' or 'of' or 'hair')
      i++;
    return i;
  ],
  description
  [;
    print "It's a small creature, somewhat like an oversized frog with slimy green skin, a beak-like nose, webbed feet and a turtle-like shell on its back. However, its most distinguishing feature is a bowl-like depression on top of its head surrounded by a tuft of hair. The bowl is ";
    if (self hasnt general)
      "full of life-giving water.";
    else
      "empty, leaving the kappa in a weakened state and unable to move.";
  ],
  life
  [;
    Ask:
      switch (second)
      {
        'child', 'girl':
          if (self hasnt general)
            "~The child will make a tasty dessert after I've eaten you.~ Ah, that's promising. It sounds like the child hasn't been eaten yet.";
          self.asked_about_child = 1;
          "~If you give me a cucumber, I'll tell you where the child is and I'll never raid the village again.~";
        'cucumber', 'cucumbers', 'kyuri':
          if (self hasnt general)
            "~Ooh, I love cucumbers, even more than human flesh. If you get me a cucumber, I might spare you.~";
          else
            "~I don't know where the cucumbers are grown. If I knew that, I could get some myself.~";
        'him', 'himself', 'itself', 'kappa', 'creature', 'monster':
          if (self hasnt general)
            "~This is my territory, samurai. If you try to cross the river, I'll eat you.~";
          else
            "~You tricked me, samurai. When I regain my strength, I'll eat your liver.~";
        'shinto', 'shrine', 'jinja':
          "~I don't care about silly human rituals.~";
        default:
          "Rather than answer your question, he spits in your direction and lets off a fart.";
      }
    Attack:
      if (self hasnt general)
      {
        remove self;
        "The kappa is no fool. When it sees you draw your sword, it spins around and dives back into the river.";
      }
      self.attacked = 1;
      "As you draw your sword, the kappa cowers before you. ~No, please spare me honourable samurai. If you kill me, the child will die. If you spare me, I'll tell you where the child is.~";
    Give:
      if (noun ~= cucumber)
        "~Keep your ", (name)noun, ". I have no need for ", (ThatOrThose)noun, ".~";
      move cucumber to limbo;
      move self to limbo;
      "The kappa smells the cucumber as if it's a great delicacy. ~Thank you samurai. You spared my life, so I will honour our bargain. You can find the child at the south end of the swamp.~^^With that, it eats the cucumber, which restores its strength, then dives into the river. You see its head bobbing above the river, with the bowl in its skull now full of life-giving water. It swims downstream and disappears over the rock dam, never to be seen again...you hope.";
    Show:
      if (noun ~= cucumber)
        "~I'm not interested in your ", (name)noun, ".~";
      "The kappa starts salivating at the sight of the cucumber. ~Gimme, gimme, gimme.~";
    Talk:
      if (self hasnt general)
        "The kappa looks you up and down. ~You look like a tasty meal. I think I'll start with your liver. Is there anything you'd like to ask me about before I eat you?~";
      else
        "~You tricked me, samurai. I'm not talking to you.~";
  ],
  before
  [;
    Bow:
      if (self has general)
        "~I do not fall for your tricks a second time, samurai!~";
      give self general;
      "You bow to the kappa, making sure to keep it in your sight so that it doesn't pull any tricks on you. The kappa returns the gesture and the water spills from the bowl in its skull. ~Oh, no. You've tricked me samurai!~ It now looks to be helpless.";
    Take:
      "As you reach towards the kappa, it licks its lips as it gets ready to eat you. You change your mind.";
  ],
  asked_about_child 0,
  attacked 0,
has animate neuter;

!========================================
! Room 25: Field
!========================================
Object room25 "Field"
with
  description "This field appears to be growing a root vegetable, as there are large tufts of light green leaves growing out of the soil about one hand span apart. The field is surrounded by dense forest, apart from another field to the east. A narrow path winds its way through the forest to the south.",
  s_to room23,
  e_to room26,
  before
  [;
    Hint:
      if (yukimoto hasnt proper)
        print_ret (string)TRY_TALKING_TO_ELDER;
      if (yono hasnt proper)
        "Try talking to the young woman.";
      if (clues_used & YONO_CROP == 0)
        print_ret (string)TRY_ASKING_YONO_ABOUT, "crops.";
      if (clues_used & YONO_DRINK == 0)
        print_ret (string)TRY_ASKING_YONO_ABOUT, "drinks.";
      if (clues_used & YONO_HUT == 0)
        print_ret (string)TRY_ASKING_YONO_ABOUT, "huts.";
      if (kappa.asked_about_child == 1 && bottle notin hidemochi && yono.asked_about_cucumber == 0)
        print_ret (string)TRY_ASKING_YONO_ABOUT, "cucumber.";
      if (girl in player)
        "What are you waiting for? Return the child to her mother.";
    Listen:
      if (noun == nothing)
        print_ret (string)YOU_HEAR_RUNNING_WATER_TO_WEST;
  ],
has light;

!----------------------------------------
! Village (floating object)
!----------------------------------------
Object "village"
with
  name 'village',
  description
  [;
    if (self in room25)
      "You can't see the village from here, but you know it's to the east.";
    print "The village is to the ";
    if (self in room31)
      "west.";
    if (self in room32)
      "north.";
    "south.";
  ],
  found_in
  [;
    if (location == room25 or room26 or room31 or room32 or room33)
      rtrue;
  ],
has scenery;

!----------------------------------------
! Field
!----------------------------------------
Object "field" room25
with
  name 'field' 'soil',
  description "The field is half full of some sort of root vegetable. The remaining half has been harvested.",
has scenery;

!----------------------------------------
! Root vegetable (actually daikon)
!----------------------------------------
Object "root vegetable" room25
with
  parse_name
  [ i;
    while (NextWord() == 'root' or 'vegetable' or 'large' or 'tufts' or 'light' or 'green' or 'leaves')
      i++;
    return i;
  ],
  description "As you're not a farmer, you can't tell what sort of vegetables these are.",
has scenery;

!----------------------------------------
! Young woman (Yono)
!----------------------------------------
Object yono "young woman" room25
with
  parse_name
  [ i;
    while (NextWord() == 'yono' or 'young' or 'woman' or 'lady' or 'farmer' or 'peasant' or 'villager' or 'silky' or 'black' or 'hair' or 'pony' or 'tail' or 'streaks' or 'pretty' or 'face' or 'tears' or 'trails')
      i++;
    return i;
  ],
  short_name
  [;
    if (self has proper)
    {
      print "Yono";
      rtrue;
    }
    rfalse;
  ],
  description "She's a very pretty woman with long silky black hair tied in a pony tail. She seems very upset about something. You can see streaks on her pretty face where tears have left trails through the dirt.",
  life
  [;
    Ask:
      switch (second)
      {
        'child', 'daughter', 'girl':
          "~The kappa stole my little girl. She's my only daughter and she's only two years old. How can she possibly survive against an evil creature like a kappa?~";
        'crop', 'crops', 'field', 'fields', 'tonyu', 'edamame':
          print "~I can tell you that the farmer who drinks tonyu grows edamame.~^";
          IsCluesUsed(YONO_CROP);
          rtrue;
        'cucumber', 'cucumbers', 'kyuri':
          self.asked_about_cucumber = 1;
          "~We haven't grown any cucumbers for a long time. Hidemochi knows more about them.~";
        'daikon':
          "~Daikon is a giant white radish. It's very popular. You can use it in stews or soups, but I like it simmered with seafood.~";
        'drink', 'drinks', 'favourite', 'favorite', 'amazake':
          print "~The farmer that lives at the south end of the village likes drinking amazake.~^";
          IsCluesUsed(YONO_DRINK);
          rtrue;
        'elder', 'yukimoto':
          "~He's the oldest man in the village. He's been like a father to me.~";
        'her', 'herself', 'woman', 'yono':
          "~I'm broken hearted. Can you find my little girl?~";
        'hidemochi', 'nagatane', 'sumini', 'yoshimoro':
          "~I'm too upset to gossip about the other villagers. Perhaps you could talk to them yourself.~";
        'house', 'houses', 'hut', 'huts', 'village', 'nasu':
          print "~The farmer who grows nasu doesn't live at the north end of the village.~^";
          IsCluesUsed(YONO_HUT);
          rtrue;
        'kappa', 'creature', 'monster':
          "~The kappa stole my daughter last night. I know it was a kappa, because it had a horrible smell. It...it...~ She starts crying and you try to assure her that you'll try to find her daughter and you'll also find this kappa and kill it.";
        'matcha', 'mugicha', 'sake':
          "~I can't think clearly to remember who drinks what.~";
        'me', 'myself', 'self', 'samurai', 'haruko', 'tadamori':
          "~You look like a brave man. I hope you can find my daughter and kill the kappa.~";
        'priest', 'shinshoku':
          "~You can find a priest at the Shinto shrine.~";
        'river':
          "~Follow the path to the south and you'll hear the river to the west, but be careful of the kappa.~";
        'shinto', 'shrine', 'jinja':
          "In between her sobs, the young woman points towards the southeast and says, ~It's that way.~";
        'swamp':
          "~You can't get to the swamp without crossing the river, but crossing the river is dangerous.~";
        default:
          "In amongst her sobbing, she says, ~I'm sorry, I can't help you with that.~";
      }
    Give, Show:
      if (noun ~= girl)
        "The woman starts crying again. ~I don't need ", (a)noun, ". I just want my daughter.~";
      deadflag = 2;
      "~Oh, you found her!~ She takes her daughter in her arms and hugs and kisses her like only the mother of a missing child can do. She bursts into tears once again, but this time, they are tears of joy. She kisses you on the cheek. ~Thank you, thank you, thank you. I don't know how to repay you.~^^Word quickly spreads to the other villagers and they all come to congratulate you on getting rid of the kappa and returning the child. They prepare a huge banquet in your honour in the elder's hut and present you with a huge sack of rice, which is the customary method of payment.^^Congratulations samurai! Job well done.";
    Talk:
      if (self hasnt proper)
      {
        give self proper;
        "She's crying, so it's hard to make out what she's saying. The poor woman is obviously very upset. ~I'm Yono. I apologise for crying, but my daughter was kidnapped by the kappa last night. I fear for the worst. The kappa might have eaten her.~ She starts sobbing again. Poor woman.";
      }
      print "~Do you think you can find my daughter?~ ";
      if (girl notin player)
        "You assure her that you'll do your best to find her.";
      else
        "You're able to tell her that you've already found her daughter.";
  ],
  asked_about_cucumber 0,
has animate female;

!========================================
! Room 26: Field
!========================================
Object room26 "Field"
with
  description "This field has stakes planted about one metre apart. The stakes have green plants tied to them and most of these show early signs of a slender purple fruit or vegetable growing on them. The forest skirts the field to the north and east and another field is to the west. The village is to the south.",
  s_to room27,
  w_to room25,
  before
  [;
    Hint:
      if (yukimoto hasnt proper)
        print_ret (string)TRY_TALKING_TO_ELDER;
      if (yoshimoro hasnt proper)
        "Try talking to the man.";
      if (clues_used & YOSHIMORO_CROP == 0)
        print_ret (string)TRY_ASKING_YOSHIMORO_ABOUT, "crops.";
      if (clues_used & YOSHIMORO_DRINK == 0)
        print_ret (string)TRY_ASKING_YOSHIMORO_ABOUT, "drinks.";
      if (clues_used & YOSHIMORO_HUT == 0)
        print_ret (string)TRY_ASKING_YOSHIMORO_ABOUT, "huts.";
      if (kappa.asked_about_child == 1 && bottle notin hidemochi && yoshimoro.asked_about_cucumber == 0)
        print_ret (string)TRY_ASKING_YOSHIMORO_ABOUT, "cucumber.";
  ],
has light;

!----------------------------------------
! Field
!----------------------------------------
Object "field" room26
with
  name 'field' 'soil',
  description "The field looks to be well drained and well maintained.",
has scenery;

!----------------------------------------
! Stakes
!----------------------------------------
Object "stakes" room26
with
  name 'stake' 'stakes',
  description "The stakes are well separated with green plants tied to them.",
has scenery;

!----------------------------------------
! Plants
!----------------------------------------
Object "plants" room26
with
  parse_name
  [ i;
    while (NextWord() == 'green' or 'plant' or 'plants' or 'crop' or 'crops' or 'slender' or 'purple' or 'fruit' or 'vegetable')
      i++;
    return i;
  ],
  description "The plants are tied to the stakes and some of them show early signs of a purple fruit or vegetable, but you don't know what it is.",
has scenery;

!----------------------------------------
! Middle-aged man (Yoshimoro)
!----------------------------------------
Object yoshimoro "middle-aged man" room26
with
  parse_name
  [ i;
    while (NextWord() == 'yoshimoro' or 'middle-aged' or 'man' or 'farmer' or 'peasant' or 'villager' or 'leathery' or 'skin' or 'head' or 'hair' or 'thin' or 'wispy' or 'beard')
      i++;
    return i;
  ],
  short_name
  [;
    if (self has proper)
    {
      print "Yoshimoro";
      rtrue;
    }
    rfalse;
  ],
  description "He's a middle-aged man with leathery skin, a good head of hair and a thin, wispy beard. He's tending his crops with intense seriousness.",
  life
  [;
    Ask:
      switch (second)
      {
        'amazake', 'matcha', 'mugicha', 'tonyu':
          "~Not now, I have to tend to these crops.~";
        'crop', 'crops', 'field', 'fields', 'hidemochi', 'takenoko':
          print "~I can tell you that Hidemochi grows takenoko.~^";
          IsCluesUsed(YOSHIMORO_CROP);
          rtrue;
        'cucumber', 'cucumbers', 'kyuri':
          self.asked_about_cucumber = 1;
          "~We no longer grow cucumbers here, but Hidemochi knows someone who does.~";
        'drink', 'drinks', 'favourite', 'favorite', 'nagatane', 'sake':
          print "~I know that Nagatane doesn't drink sake.~^";
          IsCluesUsed(YOSHIMORO_DRINK);
          rtrue;
        'elder', 'yukimoto':
          "~The village elder lives in the big hut at the south end of the village.~";
        'him', 'himself', 'man', 'yoshimoro':
          "~I've been tending these fields all my life.~";
        'house', 'houses', 'hut', 'huts', 'village':
          print "~There are two women in our village that grow crops. The older one lives at the east end of the village.~^";
          IsCluesUsed(YOSHIMORO_HUT);
          rtrue;
        'kappa', 'creature', 'monster':
          "~They call it the water devil. It's sneaky as well as ugly. It attracts people into the river, especially children, then drowns them and eats them.~";
        'me', 'myself', 'self', 'samurai', 'haruko', 'tadamori':
          "~It's good to see that there are still some good samurai willing to help poor peasants, like us. Most of the samurai nowadays are only interested in administration and charging us taxes.~";
        'nasu':
          "~Nasu is also known as eggplant. It can be broiled or grilled or baked and has a subtle flavour.~";
        'priest', 'shinshoku':
          "~The priest lives at the Shinto shrine. Our village elder can tell you more about him.~";
        'river':
          "~The river is that way.~ He points to the west.";
        'shinto', 'shrine', 'jinja':
          "~If you're looking for the shrine, head back to town and turn south when you get to the gravel path.~";
        'sumini':
          "~Sumini is a middle-aged woman, but she still works the fields.~";
        'swamp':
          "~Keep away from the swamp. It's dangerous and you could get lost.~";
        'yono':
          "~You'll find her in the next field over there.~ He points to the west.";
        default:
          "~I don't know anything about that. Can I help you with anything else?~";
      }
    Talk:
      if (self has proper)
        "~I'm getting too old for this. It's back-breaking work.~";
      give self proper;
      "~You must be the samurai from the town. I heard you were coming. My name is Yoshimoro. I wish I could help you, but I'm getting a bit old to be chasing kappas. If I can help in any other way, just ask.~";
  ],
  asked_about_cucumber 0,
has animate;

!========================================
! Room 27: Western End of Village
!========================================
Object room27 "Western End of Village"
with
  description "You find yourself at the western end of the village. It's surrounded by trees, apart from a path to the north and the rest of the village to the east.",
  n_to room26,
  e_to room12,
has light;

!========================================
! Room 28: Centre of Village
!========================================
Object room28 "Centre of Village"
with
  description "You find yourself in the centre of the farming village. Huts are scattered about in gay abandon, but you have no reason to visit any of them. The village continues to the north and south.",
  n_to room29,
  s_to room12,
has light;

!========================================
! Room 29: Northern End of Village
!========================================
Object room29 "Northern End of Village"
with
  description "You're at the northern end of the village. Trees encroach on the village to the west, so you can't go that way, but the land is cleared to the north. The village itself continues to the south and east.",
  n_to room33,
  s_to room28,
  e_to room30,
has light;

!========================================
! Room 30: Eastern Extremity of Village
!========================================
Object room30 "Eastern Extremity of Village"
with
  description "This is the eastern extremity of the village. There are one or two huts here amongst the trees of the forest, but the land has been cleared to the south and east.",
  s_to room32,
  e_to room31,
  w_to room29,
has light;

!========================================
! Room 31: Field
!========================================
Object room31 "Field"
with
  description "This field is full of bushy green plants, spaced about three hand spans apart. It's surrounded by dense forest on all sides, apart from the village back to the west.",
  w_to room30,
  before
  [;
    Hint:
      if (yukimoto hasnt proper)
        print_ret (string)TRY_TALKING_TO_ELDER;
      if (sumini hasnt proper)
        "Try talking to the woman.";
      if (clues_used & SUMINI_CROP == 0)
        print_ret (string)TRY_ASKING_SUMINI_ABOUT, "crops.";
      if (clues_used & SUMINI_DRINK == 0)
        print_ret (string)TRY_ASKING_SUMINI_ABOUT, "drinks.";
      if (clues_used & SUMINI_HUT == 0)
        print_ret (string)TRY_ASKING_SUMINI_ABOUT, "huts.";
      if (kappa.asked_about_child == 1 && bottle notin hidemochi && sumini.asked_about_cucumber == 0)
        print_ret (string)TRY_ASKING_SUMINI_ABOUT, "cucumber.";
  ],
has light;

!----------------------------------------
! Field
!----------------------------------------
Object "field" room31
with
  name 'field',
  description "It's full of bushy green plants.",
has scenery;

!----------------------------------------
! Plants
!----------------------------------------
Object "plants" room31
with
  parse_name
  [ i;
    while (NextWord() == 'bushy' or 'green' or 'plant' or 'plants' or 'pod' or 'pods' or 'crop' or 'crops')
      i++;
    return i;
  ],
  description "As you're not a farmer, you can't tell what sort of crop they are, but you notice the first signs of pods on some of the branches.",
has scenery;

!----------------------------------------
! Mulch
!----------------------------------------
Object "mulch" room31
with
  name 'mulch' 'finely-ground' 'bark',
  description "You presume this is used to fertilise the plants.",
has scenery;

!----------------------------------------
! Middle-aged woman (Sumini)
!----------------------------------------
Object sumini "middle-aged woman" room31
with
  parse_name
  [ i;
    while (NextWord() == 'sumini' or 'middle-aged' or 'woman' or 'lady' or 'farmer' or 'peasant' or 'villager' or 'grey' or 'greying' or 'hair' or 'bun' or 'eyes')
      i++;
    return i;
  ],
  short_name
  [;
    if (self has proper)
    {
      print "Sumini";
      rtrue;
    }
    rfalse;
  ],
   description "She's a middle-aged woman with greying hair tied in a bun. There's sadness in her eyes. She's spreading finely-ground bark mulch around the base of the plants.",
  life
  [;
    Ask:
      switch (second)
      {
        'amazake', 'mugicha', 'sake', 'tonyu':
          "~I'm not thirsty at the moment.~";
        'crop', 'crops', 'field', 'fields', 'yoshimoro', 'satsumaimo':
          print "~I know that Yoshimoro doesn't grow satsumaimo.~^";
          IsCluesUsed(SUMINI_CROP);
          rtrue;
        'cucumber', 'cucumbers', 'kyuri':
          self.asked_about_cucumber = 1;
          "~Hidemochi is the best one to ask about cucumbers.~";
        'drink', 'drinks', 'favourite', 'favorite', 'matcha':
          print "~The woman that's younger than me likes drinking matcha.~^";
          IsCluesUsed(SUMINI_DRINK);
          rtrue;
        'edamame':
          "~These are green soybeans. Most people use them to make tofu after the beans mature, but you can steam them or pan fry them to add a slightly nutty sweetness to a meal. You can also eat them raw as a snack, but don't eat the pods, they're awful.~";
        'elder', 'yukimoto':
          "~He's a wise old man.~";
        'her', 'herself', 'sumini', 'woman':
          "~I enjoy looking after the crops, but I enjoyed it a lot more when my husband was here to share the work.~";
        'hidemochi':
          "~The poor old dear lost his child to a kappa when he was a young man. He's been cranky ever since. Be gentle with him. He's really not as bad as he seems.~";
        'house', 'houses', 'hut', 'huts', 'village', 'nagatane':
          print "~Let me see, Nagatane lives at the centre of the village.~^";
          IsCluesUsed(SUMINI_HUT);
          rtrue;
        'husband':
          "~I lost him some years ago. If it's all the same to you, I'd rather not talk about it.~";
        'kappa', 'creature', 'monster':
          "~Kappa means 'river child', but there's nothing innocent about this horrible creature. It has webbed hands and feet, a bird-like beak and sharp claws to slash its prey.~";
        'me', 'myself', 'self', 'samurai', 'haruko', 'tadamori':
          "~You remind me of my husband, but he died some time ago.~";
        'priest', 'shinshoku':
          "~There's a priest at the Shinto shrine.~";
        'river':
          "~The river is where we get water for the crops, but be careful of the kappa.~";
        'shinto', 'shrine', 'jinja':
          "~The shrine is south of the village.~";
        'swamp':
          "~The swamp is on the other side of the river, but no one goes there.~";
        'yono':
          "~Poor Yono. She's the one whose child was stolen by the kappa last night. The poor girl is terribly upset.~";
        default:
          "~That's not something I'm familiar with.~";
      }
    Talk:
      if (self has proper)
        "~It's a nice day for tending the crops. If I didn't know that you were looking for the missing girl, I'd ask you to join me.~";
      give self proper;
      "~Hello samurai. My name is Sumini. I heard that you were coming to look for the missing girl. If you can kill the kappa, too, that would be worthy of a celebration.~";
  ],
  asked_about_cucumber 0,
has animate female;

!========================================
! Room 32: Field
!========================================
Object room32 "Field"
with
  description "This field is well drained and looks like it gets plenty of sunshine from the cleared area to the north, where the village is located. The soil is furrowed, as though it's ready for planting fresh crops. It's surrounded by dense forest on all sides, apart from that cleared area to the north.",
  n_to room30,
  before
  [;
    Hint:
      if (yukimoto hasnt proper)
        print_ret (string)TRY_TALKING_TO_ELDER;
      if (nagatane hasnt proper)
        "Try talking to the young man.";
      if (clues_used & NAGATANE_CROP == 0)
        print_ret (string)TRY_ASKING_NAGATANE_ABOUT, "crops.";
      if (clues_used & NAGATANE_DRINK == 0)
        print_ret (string)TRY_ASKING_NAGATANE_ABOUT, "drinks.";
      if (clues_used & NAGATANE_HUT == 0)
        print_ret (string)TRY_ASKING_NAGATANE_ABOUT, "huts.";
      if (kappa.asked_about_child == 1 && bottle notin hidemochi && nagatane.asked_about_cucumber == 0)
        print_ret (string)TRY_ASKING_NAGATANE_ABOUT, "cucumber.";
  ],
has light;

!----------------------------------------
! Field
!----------------------------------------
Object "field" room32
with
  parse_name
  [ i;
    while (NextWord() == 'field' or 'soil' or 'tilled' or 'furrow' or 'furrows')
      i++;
    return i;
  ],
  description "The soil in the field looks freshly turned.",
has scenery;

!----------------------------------------
! Crops
!----------------------------------------
Object "crops" room32
with
  name 'crop' 'crops',
  description "There are no crops here, just tilled soil ready for planting.",
has scenery;

!========================================
! Room 33: Field
!========================================
Object room33 "Field"
with
  description "This field is full of bamboo surrounded by dense forest. The village is to the south.",
  s_to room29,
  before
  [;
    Hint:
      if (yukimoto hasnt proper)
        print_ret (string)TRY_TALKING_TO_ELDER;
      if (hidemochi hasnt proper)
        "Try talking to the man.";
      if (kappa.asked_about_child == 0)
        "Come back later.";
      if (bottle notin hidemochi && hidemochi.asked_about_cucumber_1 == 0)
        print_ret (string)TRY_ASKING_HIDEMOCHI_ABOUT, "cucumber.";
      if (bottle notin hidemochi)
        "Give Hidemochi what he asked for.";
      if (hidemochi.asked_about_cucumber_2 == 0)
        print_ret (string)TRY_ASKING_HIDEMOCHI_ABOUT, "cucumber.";
  ],
has light;

!----------------------------------------
! Field
!----------------------------------------
Object "field" room33
with
  name 'field' 'cultivated',
  description "It's full of bamboo, but it's not wild bamboo. You can tell from the regular spacing that it's cultivated in some way.",
has scenery;

!----------------------------------------
! Takenoko
!----------------------------------------
Object "takenoko" room33
with
  parse_name
  [ i;
    while (NextWord() == 'takenoko' or 'edible' or 'bamboo' or 'shoots' or 'crop' or 'crops')
      i++;
    return i;
  ],
  description "The bamboo is being cultivated for the edible bamboo shoots.",
  before
  [;
    Cut, Pull, Push, Take:
      print_ret (The)hidemochi, " stops you. ~Oi, hands off. That's not ready for harvesting just yet.~";
  ],
has scenery;

!----------------------------------------
! Elderly man (Hidemochi)
!----------------------------------------
Object hidemochi "elderly man" room33
with
  article AN,
  parse_name
  [ i;
    while (NextWord() == 'hidemochi' or 'elderly' or 'old' or 'man' or 'farmer' or 'peasant' or 'villager' or 'bent' or 'back' or 'leathery' or 'skin')
      i++;
    return i;
  ],
  short_name
  [;
    if (self has proper)
    {
      print "Hidemochi";
      rtrue;
    }
    rfalse;
  ],
  description "He's an elderly man with a bent back and leathery skin from many years working in the fields. He appears to be thinning out the bamboo.",
  life
  [;
    Ask:
      switch (second)
      {
        'amazake', 'matcha', 'mugicha', 'sake', 'tonyu':
          "He stops and looks at you for a moment. ~I'm busy working. I don't have time to talk about drinks.~";
        'crop', 'crops', 'field', 'fields':
          "~Hrmmph! I only care about my own crops. If you want to know about everyone else's crops, ask them, not me.~";
        'cucumber', 'cucumbers', 'kyuri':
          if (bottle notin self)
          {
            self.asked_about_cucumber_1 = 1;
            "You've piqued his interest. ~I know where you can get a cucumber, but it's a secret. If you give me a bottle of my favourite drink, I'll tell you about the secret.~";
          }
          self.asked_about_cucumber_2 = 1;
          "~There used to be a woman in our village who grew cucumbers, but the kappa kept stealing them, so she moved to the far side of the swamp and lives there by herself. If you want a cucumber, that's where you'll have to go, but it's hard to find your way through the swamp.~";
        'drink', 'drinks', 'favourite', 'favorite':
          if (self.asked_about_cucumber_1 == 0)
            "~What business is it of yours?~";
          if (bottle notin self)
            "~Do you have a bottle of my favourite drink? If not, go away.~";
          else
            "~Thank you for the bottle of sake, samurai. You're a good man.~";
        'elder', 'yukimoto':
          "~You'll find him in his hut.~";
        'him', 'himself', 'man', 'hidemochi':
          "~I'm busy. I don't have time to talk to you, unless you have something interesting to ask me about.~";
        'house', 'houses', 'hut', 'huts', 'village':
          "~Everyone lives in the village. If you want to know who lives where, ask someone else. I really don't care.~";
        'kappa', 'creature', 'monster':
          "His eyes narrow and he stares at you. ~That creature is evil. It ate one of my children many years ago and now it's back. It took one of the villager's children last night. As much as I feel sorry for the child and her mother, I don't hold out much hope of getting her back.~";
        'me', 'myself', 'self', 'samurai', 'haruko', 'tadamori':
          "~You look like a samurai. I don't care much for samurai.~";
        'nagatane', 'sumini', 'yoshimoro', 'yono':
          "~If you want to know about the other villagers, ask them, not me.~";
        'priest', 'shinshoku':
          "~Do I look like a priest? If you want a priest, go to the Shinto shrine.~";
        'river':
          "~The river is west of here. You'll need to cross it to get to the swamp, but don't cross it unless you know where the kappa is. If it's in the river, it'll probably eat you.~";
        'shinto', 'shrine', 'jinja':
          "~It's south of the village. Now go away and leave me alone.~";
        'swamp':
          "~It's on the far side of the river, but it's dangerous to cross the river, as the kappa might be there. There are no trails through the swamp, so be careful that you don't get lost.~";
        'takenoko', 'bamboo', 'shoots':
          "~These are edible bamboo shoots. They're tender and slightly nutty. You can eat them fresh or dried.~";
        default:
          if (bottle notin self)
            "~Go away. I don't have time to talk.~ Hmm, he seems a bit grouchy. Try asking him about something else.";
          else
            "~You may have given me a bottle of sake, but that doesn't mean I can hang around all day answering all your questions.~";
      }
    Give:
      if (noun ~= bottle)
        "~What am I supposed to do with that? You can keep your ", (name)noun, ".~";
      move bottle to self;
      "~Aarrhh, you're a champion!~ He takes the bottle of sake from you and hides it under his kimono. All of a sudden, he doesn't look so grumpy. ~I'll save that for later. Now, how can I help you?~";
    Show:
      if (noun ~= bottle)
        "~Stop wasting my time with your silly trinkets.~";
      else
        "~I'd be happy to take that off your hands if you don't want it.~";
    Talk:
      if (self has proper)
        "~I need to attend to this bamboo.~";
      give self proper;
      "~I don't have time for strangers. Strangers just prevent Hidemochi from getting the crops harvested.~ Hmm, you presume this fellow is Hidemochi. He seems to be pretty grumpy, so you'd better let him return to his work, unless you have a more specific question for him.";
  ],
  asked_about_cucumber_1 0,
  asked_about_cucumber_2 0,
has animate;

!========================================
! Room 34: West River Bank
!========================================
Object room34 "West River Bank"
with
  description "You're on the west bank of the river. The ground around the river is somewhat marshy, as a swamp to the west appears to empty into the river at this point. The swamp looks quite forbidding. The river to the east looks like the more preferable option.",
  e_to
  [;
    print (string)HOLD_SWORDS_ABOVE_HEAD;
    return room24;
  ],
  w_to room35,
  before
  [;
    Smell:
      "You can smell the mud and rotting vegetation of the swamp to the west.";
    Swim:
      if (noun == nothing)
        <<Go FAKE_E_OBJ>>;
  ],
has light;

!----------------------------------------
! West river bank
!----------------------------------------
Object "west river bank" room34
with
  name 'west' 'river' 'bank',
  description "It's quite marshy due to the swamp to the west.",
has scenery;

!========================================
! Room 35: Swamp
!========================================
Object room35 "Swamp"
with
  description SWAMP_DESCRIPTION,
  n_to room36,
  s_to
  [;
    if (kappa notin limbo)
      return room35;
    print "You weave your way through the decaying undergrowth and find another way through the swamp. You would never have found it if the kappa hadn't told you about it.^^";
    return room41;
  ],
  e_to room34,
  w_to room35,
  before
  [;
    Hint:
      print_ret (string)LOST_IN_SWAMP;
    Listen:
      if (noun == nothing)
        "You can hear running water to the east.";
    Smell:
      if (noun == nothing)
        "The air smells much fresher to the east.";
  ],
  after
  [;
    Go:
      if (self hasnt visited)
      {
        <Look>;
        ShowTutorial(TUT_DROP_ITEMS_IN_MAZE);
        rtrue;
      }
  ],
has light;

!----------------------------------------
! Swamp
!----------------------------------------
Object "swamp"
with
  name 'swamp' 'mud' 'tangled' 'undergrowth',
  description "It's muddy and smelly and full of tangled undergrowth.",
  react_before
  [;
    Drop:
      print "You'd better not drop anything in the swamp, as it'll sink in the mud and you'll never find it again.^";
      ShowTutorial(TUT_LISTEN_IN_MAZE);
      rtrue;
  ],
  found_in
  [;
    if (location == room35 or room36 or room37 or room38 or room41)
      rtrue;
  ],
has scenery;

!========================================
! Room 36: Swamp
!========================================
Object room36 "Swamp"
with
  description SWAMP_DESCRIPTION,
  n_to room37,
  s_to room35,
  e_to room36,
  w_to room38,
  before
  [;
    Hint:
      print_ret (string)LOST_IN_SWAMP;
    Listen:
      if (noun == nothing)
        "You can hear the mud squelching under your feet.";
    Smell:
      if (noun == nothing)
        "The mud really stinks.";
  ],
has light;

!========================================
! Room 37: Swamp
!========================================
Object room37 "Swamp"
with
  description SWAMP_DESCRIPTION,
  n_to room37,
  s_to room38,
  e_to room36,
  w_to room37,
  before
  [;
    Hint:
      print_ret (string)LOST_IN_SWAMP;
    Listen:
      if (noun == nothing)
        "You can hear the buzzing of mosquitoes.";
    Smell:
      if (noun == nothing)
        "You can smell rotting vegetation.";
  ],
has light;

!========================================
! Room 38: Swamp
!========================================
Object room38 "Swamp"
with
  description SWAMP_DESCRIPTION,
  n_to room38,
  s_to room36,
  e_to room37,
  w_to room39,
  before
  [;
    Hint:
      print_ret (string)LOST_IN_SWAMP;
    Listen:
      if (noun == nothing)
        "You can hear singing to the west.";
    Smell:
      if (noun == nothing)
        "You can smell something cooking to the west.";
  ],
has light;

!========================================
! Room 39: Clearing Outside Hut
!========================================
Object room39 "Clearing Outside Hut"
with
  description "You find yourself in a clearing to the west of the swamp. The ground is much drier here and someone has decided to take advantage of that to build a hut. You can enter the hut to the north or return to the horrible swamp to the east.",
  n_to room40,
  e_to room38,
  in_to room40,
  before
  [;
    Listen:
      if (noun == nothing)
        "You can hear singing coming from inside the hut.";
    Smell:
      if (noun == nothing)
        "You can smell the aroma of cooking coming from inside the hut.";
  ],
has light;

!----------------------------------------
! Clearing
!----------------------------------------
Object "clearing" room39
with
  name 'clearing' 'ground',
  description "The ground is quite firm here. It's still damp and the rich colour indicates that it's full of nutrients.",
has scenery;

!----------------------------------------
! Swamp
!----------------------------------------
Object "swamp" room39
with
  name 'swamp' 'impenetrable' 'barrier',
  description "The swamp to the east forms an almost impenetrable barrier between the clearing and the river.",
has scenery;

!----------------------------------------
! Hut (floating object)
!----------------------------------------
Object "hut"
with
  name 'hut' 'ramshackle' 'sticks' 'bamboo',
  description "It looks like it's ready to fall over at the first gust of wind, yet it's clearly quite old, so it must have survived many gusts of wind. Looks can be deceiving.",
  before
  [;
    Enter:
      <<Go FAKE_IN_OBJ>>;
    Exit:
      <<Go FAKE_OUT_OBJ>>;
  ],
  found_in room39 room40,
has scenery;

!========================================
! Room 40: Hut
!========================================
Object room40 "Hut"
with
  description "You're in a ramshackle hut cobbled together from sticks and bamboo. It doesn't look very stable, but I guess it keeps the rain out. The exit is to the south.",
  s_to room39,
  out_to room39,
  before
  [;
    Hint:
      if (fumeshi hasnt proper)
        "Try talking to the old woman.";
      if (fumeshi.told_about_cucumber == 0 && fumeshi.told_about_cucumber == 0)
        "Try talking to Fumeshi again or asking her about the cucumber.";
      if (cucumber has scenery)
        "What are you waiting for? Buy a cucumber.";
  ],
has light;

!----------------------------------------
! Kettle
!----------------------------------------
Object kettle "kettle" room40
with
  name 'kettle' 'large',
  initial "There's a large kettle sitting over the fireplace.",
  description
  [;
    print "It's a large kettle that seems to be cooking the old woman's supper. It actually smells pretty good. ";
    <<Search self>>;
  ],
  before
  [;
    Receive:
      "The broth looks quite nice without you adding anything to it.";
    Take:
      "It's way too hot.";
  ],
has container open static;

!----------------------------------------
! Broth
!----------------------------------------
Object "broth" kettle
with
  article SOME,
  name 'broth' 'vegetable' 'woman^s' 'supper',
  description "It looks like a vegetable broth.",
  before
  [;
    Drink, Eat, Take:
      "Would you deprive the old woman of her supper? No, of course not.";
    Smell:
      "It smells pretty good.";
  ],
has static;

!----------------------------------------
! Fireplace
!----------------------------------------
Object "fireplace" room40
with
  name 'fireplace' 'fire' 'roaring' 'blaze',
  description "There's a roaring blaze in the fireplace that keeps the kettle simmering.",
has scenery;

!----------------------------------------
! Old woman (Fumeshi)
!----------------------------------------
Object fumeshi "old woman" room40
with
  article AN,
  parse_name
  [ i;
    while (NextWord() == 'fumeshi' or 'old' or 'elderly' or 'woman' or 'lady' or 'grey' or 'wiry' or 'hair' or 'wrinkled' or 'skin' or 'rags' or 'eyes')
      i++;
    return i;
  ],
  short_name
  [;
    if (self has proper)
    {
      print "Fumeshi";
      rtrue;
    }
    rfalse;
  ],
  description
  [;
    if (self hasnt proper)
      "The old woman is hunched over the kettle and seems to be ignoring you. Maybe she's deaf. Try talking to her.";
    else
      "She's an old woman with grey, wiry hair and wrinkled skin. She's dressed in rags, yet there's wisdom in her eyes.";
  ],
  life
  [;
    Ask:
      switch (second)
      {
        'cucumber', 'cucumbers', 'kyuri':
          self.asked_about_cucumber = 1;
          print "~We call it kyuri. I used to grow it when I lived in the village, but the kappa kept stealing it, so I had to hide out in the swamp and grow it here.";
          if (cucumber has scenery)
            print " I can sell you one for a silver coin.";
          "~";
        'her', 'herself', 'woman', 'fumeshi':
          "~I used to live in the village across the river, where I grew cucumbers, but the kappa kept stealing them, so I had to hide in the swamp.~";
        'kami':
          "~You will not find any kami in the swamp. They reside in the honden and the sacred forest at the Shinto shrine.~";
        'kappa', 'creature', 'monster':
          "~The kappa might look small and frail, but it's a frightening monster. It lures people to the river, then drowns them or eats them alive. It's particularly fond of human livers and children, but it likes cucumbers even more.~";
        'river':
          "~The river is to the east, but you must know that, as you would have crossed it to find your way here.~";
        'shinto', 'shrine', 'jinja':
          "~The wisdom of the ancestors can be found in the shrine, but only if you are respectful to the kami.~";
        'swamp':
          "~The kappa won't venture very far into the swamp because it's muddy and smelly and it's easy to get lost. I always go a different way, so that the kappa can't track me. For you, my friend, the shortest way to return to the river from outside the hut is east, south, south and east.~";
        'village':
          "~The village is on the other side of the river, which is east of the swamp.~";
        default:
          "~My memory is getting fuzzy in my old age. I don't think I know anything about that.~";
      }
    Give:
      if (noun ~= coin)
        "~Thank you, samurai, but I lead a simple life and have no need for ", (a)noun, ".~";
      <<Buy cucumber>>;
    Show:
      if (noun == girl)
        "Fumeshi is dismayed. ~Shouldn't you return the child to her mother?~";
    Talk:
      if (self has proper)
      {
        self.told_about_cucumber = 1;
        print "You tell Fumeshi the full story of the kappa, from the disturbance at the inn to your encounter with the kappa at the river. She listens intently.";
        if (cucumber has scenery)
          print " ~So, you need a cucumber to placate the kappa. I can sell you one for a silver coin. That's a small price to pay for the life of a child.~";
        "";
      }
      give self proper;
      "~Good morning samurai.~ How does she know that you're a samurai when she has her back to you? She turns around, as though she read your mind. ~You trample through the swamp like an ox, the material of your kamishimo brushes together with a distinctive sound and your swords clink as you walk. My name is Fumeshi. What can I do for you?~";
  ],
  before
  [;
    Pay:
      if (coin in player)
        <<Give coin self>>;
      "You'll need some money before you can pay ", (the)self, ".";
  ],
  asked_about_cucumber 0,
  told_about_cucumber 0,
has animate female;

!----------------------------------------
! Cucumber
!----------------------------------------
Object cucumber "cucumber" room40
with
  parse_name
  [ i;
    while (NextWord() == 'cucumber' or 'kyuri' or 'long' or 'skinny' or 'bumpy' or 'green' or 'skin')
      i++;
    return i;
  ],
  description "It's long and skinny with a bumpy green skin. It looks very crunchy.",
  before
  [;
    if (self has scenery && action ~= ##Buy)
    {
      PrintMsg(MSG_PARSER_NOSUCHTHING);
      rtrue;
    }
    Buy:
      if (cucumber hasnt scenery)
        "~I've already given you my best cucumber. It should be enough to satisfy the kappa.~";
      if (coin notin player)
        "You'll need a silver coin to pay for the cucumber.";
      remove coin;
      give cucumber ~scenery;
      move cucumber to player;
      "The old woman takes your coin and rummages through her supplies. ~Ah, this is a nice one.~ She presents you with a large cucumber. ~Here you are samurai. This is the best cucumber I have. Use it wisely.~";
    Eat:
      "Don't eat it! You'll need it for the kappa.";
    Touch:
      "You can feel the bumps on the cucumber's skin.";
  ],
has scenery;

!========================================
! Room 41: Swamp
!========================================
Object room41 "Swamp"
with
  description SWAMP_DESCRIPTION,
  n_to room35,
  s_to room41,
  e_to room41,
  w_to room41,
  before
  [;
    Hint:
      if (girl in self)
        "Return the child to her mother.";
      print_ret (string)LOST_IN_SWAMP;
    Listen:
      if (noun == nothing)
        "You can hear the sound of running water to the east, but the undergrowth is too thick to see the river from here.";
    Smell:
      if (noun == nothing)
        "You can smell rotting wood, but it's not as bad as elsewhere in the swamp.";
  ],
has light;

!----------------------------------------
! Little girl
!----------------------------------------
Object girl "little girl" room41
with
  name 'little' 'girl' 'young' 'child',
  description
  [;
    print "She's just a young girl, maybe two years old. ";
    if (self hasnt moved)
      "She looks like she's been crying, but she's now asleep.";
    else
      "She clings to you with all her might.";
  ],
  life
  [;
    Answer, Ask, Tell:
      if (self hasnt moved)
        "She's asleep.";
      else
        "She's not very talkative. You can't really blame her after the trauma she's been through.";
    Attack, ThrowAt:
      "A samurai doesn't go around attacking little children.";
    Give, Show:
      if (self hasnt moved)
        "She's asleep.";
      else
        "She doesn't seem to be interested in anything you've got. She just wants to get home to her mummy.";
    Kiss:
      if (self hasnt moved)
        "You'll have to pick her up first.";
      else
        "You give the little girl a peck on the cheek and she hugs you tighter.";
    Talk:
      if (self hasnt moved)
        "She can't hear you while she's asleep.";
      else
        "You try to assure her that she is now safe from the kappa, but she just says, ~Where's mummy?~";
    WakeOther:
      if (self hasnt moved)
        "It might be better to leave her sleeping.";
      else
        "She's no longer asleep since you picked her up.";
  ],
  before
  [;
    Drop:
      "It took you a long time to find this little girl. You're not about to drop her now. You need to give her back to her mother.";
  ],
  after
  [;
    Take:
      "The girl wakes up. She looks like she's about to start crying, but when she sees that you're not a kappa and she's not about to become the kappa's supper, she gives you a big smile and a hug and asks, ~Where's mummy?~ You assure her that you'll take her back to her mummy.";
  ],
has animate female;

!========================================
! Limbo
!========================================
Object limbo;

!========================================
! Printing rules
!========================================
[ consultWord word i;
  for (i=0:i<WordLength(word):i++)
    print (char)LowerCase(WordAddress(word)->i);
];

[ DoesntOrDont obj;
  if (obj has pluralname)
    print "don't";
  else
    print "doesn't";
];

[ firstConsultWord word i;
  for (i=0:i<WordLength(word):i++)
    if (i == 0)
      print (char)UpperCase(WordAddress(word)->i);
    else
      print (char)LowerCase(WordAddress(word)->i);
];

[ italic text;
#Ifv5;
  style underline;
#Endif;
  print (string)text;
#Ifv5;
  style roman;
#Endif;
];

!========================================
! Other routines
!========================================
[ IsCluesUsed clue;
  clues_used = clues_used | clue;
  if (clues_used == 4095)
    ShowTutorial(TUT_CLUES_USED);
  rtrue;
];

[ IsMealFinished;
  if (soup in limbo && vegetables in limbo && rice in limbo && sake in limbo)
  {
    remove table;
    remove soup_bowl;
    remove plate;
    remove rice_bowl;
    remove cup;
    remove chopsticks;
    print "^As soon as you've finished your meal, Mokuko collects the table and the empty bowls and takes them outside the room. She then returns, bows deeply and asks if you require any extra 'service'.^";
    ShowTutorial(TUT_ASK_ABOUT_SERVICE);
  }
  rtrue;
];

[ LowerCase c; ! for ZSCII matching ISO 8859-1
  switch (c)
  {
    'A' to 'Z': c = c + 32;
    202, 204, 212, 214, 221: c--;
    217, 218: c = c - 2;
    158 to 160, 167, 168, 208 to 210: c = c - 3;
    186 to 190, 196 to 200: c = c - 5 ;
    175 to 180: c = c - 6;
  }
  return c;
];

[ ShowTutorial i;
  if (tutorial && tutorial_used->i == 0)
  {
    tutorial_used->i = 1;
    tutorial_shown = 1;
    switch (i)
    {
      TUT_LOOK:
        tutorial_shown = 0;
        print_ret (italic)"^[The description above tells you where you are and what you can see. The '>' below is the prompt. You type commands after the prompt. When the location description scrolls off the screen, you can refresh it by typing LOOK (or L). Try it now. Type L after the prompt.]";
      TUT_EXAMINE_ME:
        print_ret (italic)"^[When you start a new game, it's a good idea to EXAMINE or LOOK AT yourself. EXAMINE can be abbreviated to X. Try X ME.]";
      TUT_INVENTORY:
        print_ret (italic)"^[When you start a new game, it's also a good idea to take an inventory to see if you're carrying anything. Try INVENTORY (or I).]";
      TUT_EXAMINE_ALL:
        print_ret (italic)"^[Whenever you enter a new location, you should identify all the things mentioned in the description and EXAMINE (or X) each one. The responses may provide more details or important clues.]";
      TUT_MOVEMENT:
        print_ret (italic)"^[When you've finished examining things, you can move around using any of the four cardinal compass directions such as GO NORTH (or NORTH). These can be abbreviated to N, S, E and W. The location description will tell you which directions you can go. You can also use verbs like IN, OUT, ENTER and EXIT when appropriate.]";
      TUT_EXAMINE_KAMISHIMO:
        print_ret (italic)"^[You can take a closer look at anything you're carrying or wearing using EXAMINE (or X). Try X KAMISHIMO.]";
      TUT_EXAMINE_KATAGINU:
        print_ret (italic)"^[Every time you discover something new, you should EXAMINE it to see if it reveals any more details or any clues. Try X KATAGINU, X KIMONO, X HAKAMA, then examine the other things in your inventory.]";
      TUT_OPEN_POUCH:
        print_ret (italic)"^[The pouch is apparently closed. When you find something that's closed, you can try opening it. Try OPEN POUCH.]";
      TUT_TAKE_COIN:
        print_ret (italic)"^[The pouch is a container. You can take objects out of a container using GET or TAKE. Try GET COIN.]";
      TUT_PUT_COIN:
        print_ret (italic)"^[If you need to put an object back into a container, you can do so using PUT or INSERT, but you must also specify which container you want to put it in. Try PUT COIN IN POUCH. This will also free up space in your inventory.]";
      TUT_REMOVE_WARAJI:
        print_ret (italic)"^[You can take off clothing using REMOVE. Try REMOVE WARAJI. You can put them back on later using WEAR WARAJI.]";
      TUT_DROP_WARAJI:
        print_ret (italic)"^[You removed the waraji, but you're still holding them. You can drop objects when they're no longer needed. Try DROP WARAJI or DROP THEM. You can get them again later using GET or TAKE WARAJI.]";
      TUT_TALK:
        print_ret (italic)"^[If you come across another character in the game, apart from examining them, you should also try talking to them. Try TALK TO INNKEEPER and TALK TO MAID.]";
      TUT_ASK_INNKEEPER:
        print_ret (italic)"^[As well as talking to the innkeeper, you can ask him about things. Try ASK HIM ABOUT MAID, then ASK HIM ABOUT HIMSELF.]";
      TUT_ASK_MAID:
        print_ret (italic)"^[As well as talking to the maid, you can ask her about things. Try ASK HER ABOUT INNKEEPER, then ASK HER ABOUT HERSELF.]";
      TUT_ASK_ABOUT_SERVICE:
        print_ret (italic)"^[When someone mentions something interesting, you should ask them about it. In this case, ASK MOKUKO ABOUT SERVICE.]";
      TUT_SLEEP:
        print_ret (italic)"^[Now that you're bathed and fed, it's time to get a good night's sleep. To do that, try SLEEP.]";
      TUT_ASK_ABOUT_KAPPA:
        print_ret (italic)"^[Nakaari has provided you with some important facts. Before you leave, you should ask him for more information. Try ASK HIM ABOUT KAPPA, PEASANT, VILLAGE and anything else that he mentions that may seem relevant.]";
      TUT_HELP_HINT:
        print_ret (italic)"^[You're on your own now. Type HELP for a quick reminder of the main commands or HINT if you get stuck. The tutorial may continue to offer occasional suggestions. Now that you know your objective, this might be a good place to SAVE the game so that you don't need to replay the tutorial.]";
      TUT_CLUES_USED:
        print_ret (italic)"^[The villagers have provided all the clues you need. You can now work out the crops they grow, their favourite drinks and where they live. This information will be useful in due course.]";
      TUT_DROP_ITEMS_IN_MAZE:
        print_ret (italic)"^[You've entered a maze. A maze is a series of locations with identical descriptions. The secret to solving a maze is to drop an object to make the location look different and DRAW A MAP! Directions may bend or weave or loop back to your original location.]";
      TUT_LISTEN_IN_MAZE:
        print_ret (italic)"^[Oh, no! You can't drop items in the swamp. In that case, use your other senses, such as SMELL and LISTEN.]";
    }
  }
  rtrue;
];

[ UpperCase c; ! for ZSCII matching ISO 8859-1
  switch (c)
  {
    'a' to 'z': c = c - 32;
    201, 203, 211, 213, 220: c++;
    215, 216: c = c + 2;
    155 to 157, 164, 165, 205 to 207: c = c + 3;
    181 to 185, 191 to 195: c = c + 5 ;
    169 to 174: c = c + 6;
  }
  return c;
];

!========================================
! Grammar
!========================================
Extend 'ask' first
  * 'about'/'for'/'to' topic -> VagueAsk
  * creature 'for' topic -> Ask;

Extend 'eat' first
  * noun -> Eat
  * noun 'with' noun -> Eat;

Extend 'lock' first
  * noun -> Lock;

Extend 'look'
  * 'behind' noun -> LookUnder
  * 'into' noun -> Search
  * 'under' noun -> LookUnder;

Extend only 'pay'
  * creature -> Pay;

Extend 'pray'
  * 'to' noun -> Pray;

Extend 'read' first
  * noun -> Read;

Extend 'remove' first
  * multiheld -> Disrobe;

Extend only 'say' first
  * topic -> Say;

Extend 'show' first
  * noun -> Expose;

Extend only 'speak' replace
  * -> Talk
  * creature -> Talk
  * noun -> Talk
  * 'to'/'with' creature -> Talk
  * 'to'/'with' noun -> Talk
  * 'to'/'with' creature 'about' topic -> Ask
  * 'to'/'with' noun 'about' topic -> Ask;

Extend 'swim'
  * noun -> Swim
  * 'across'/'in' noun -> Swim;

Extend 'unlock' first
  * noun -> Unlock;

Extend 'wear' first
  * multiheld -> Wear;

Verb 'expose' 'reveal'
  * noun -> Expose
  * creature noun -> Expose reverse
  * noun 'to' creature -> Expose;

Verb meta 'about' 'info'
  * -> About;

Verb 'bow'
  * -> Bow
  * 'to' creature -> Bow
  * 'to' noun -> Bow;

Verb 'clap'
  * -> Clap;

Verb 'cleanse' 'wash' 'rinse' = 'rub';

Verb 'count'
  * noun -> Count;

Verb meta 'credits'
  * -> Credits;

Verb 'cross'
  * noun -> Swim;

Verb 'greet'
  * creature -> Talk
  * noun -> Talk;

Verb meta 'help' 'instructions'
  * -> Help;

Verb 'hint' 'clue'
  * -> Hint;

Verb 'inspect' = 'examine';

Verb 'ring' = 'hit';

Verb 'slide'
  * noun -> Slide
  * noun 'open' -> Open
  * noun 'closed' -> Close;

Verb 'talk' 'babble' 'chat' 'communicate' 'converse' 'gab' 'gossip'
  * -> Talk
  * creature -> Talk
  * noun -> Talk
  * 'to'/'with' creature -> Talk
  * 'to'/'with' noun -> Talk
  * 'to'/'with' creature 'about' topic -> Ask
  * 'to'/'with' noun 'about' topic -> Ask;

Verb 'thank'
  * creature -> Thank;

Verb meta 'tutorial'
  * -> Tutorial
  * 'on' -> TutorialOn
  * 'off' -> TutorialOff;

Verb 'use'
  * noun -> Use;

Verb 'worship' = 'pray';

Verb 'xyzzy' 'plover' 'plugh' 'yoho'
  * -> MagicWord;

!========================================
! Actions
!========================================
[ AboutSub;
  print "This game was written for ParserComp 2024, 28 April to 30 June 2024. The idea for the game was prompted by a discussion with Gianluca Girelli about Japanese myths and legends and the yokai. The kappa is just one example of yokai. Little did I know what I was getting myself in for.^^";
  <<Credits>>;
];

[ BowSub;
  if (noun == nothing)
    "You bow to no one in particular.";
  if (ObjectIsUntouchable(noun))
    return;
  if (noun has animate)
    "You bow once and ", (the)noun, " returns the gesture.";
   "You bow once, but ", (the)noun, " doesn't respond.";
];

[ ClapSub;
  "You clap once, but no one pays any attention.";
];

[ CountSub;
  if (ObjectIsUntouchable(noun))
    return;
  if (noun provides number)
  {
    if (noun.number == 0)
      "There aren't any.";
    if (noun.number == 1)
      "There's only one.";
    "There's ", (number)noun.number, " of them.";
  }
  if (noun has pluralname)
    "There's more than one.";
  "There's only one.";
];

[ CreditsSub;
  "Concept, game design and coding by Garry Francis.^Play testing by Ben Ryan, Charles Moore Jr, Gianluca Girelli, Jade J Aincioa and John H Doolittle.";
];

[ ExposeSub;
  if (ObjectIsUntouchable(noun))
    return;
  if (second == nothing)
    "Who do you want to show ", (ItOrThem)noun, " to?";
  if (second == player)
    print_ret (The)second, " is not interested in you.";
  print_ret (The)second, " is not interested in your ", (name)noun, ".";
];

[ GoSub _prop;
  if (selected_direction == ne_to or nw_to or se_to or sw_to)
    "There are no diagonal directions in this game.";
  if (selected_direction == u_to or d_to)
    "There are no vertical directions in this game.";
  _prop = selected_direction;
#Iftrue RUNTIME_ERRORS > RTE_MINIMUM;
  if (_prop == 0)
    return _RunTimeError(ERR_INVALID_DIR_PROP);
#Endif;
  return GoDir(_prop);
];

[ HelpSub;
  print "Tell me what to do using simple commands starting with a verb.^^Use LOOK (or L) to refresh the location description. Identify all the objects in the description and EXAMINE (or X) each one. Read responses carefully for hints. Take notes when anything looks important, as you may need it later.^^Use compass directions (N, S, E and W) to move around. Draw a map as you go.^^Use GET or TAKE to take objects and DROP to drop them again. Use WEAR to wear things like clothing and REMOVE to remove anything that's currently worn. Use INVENTORY (or I) to see what you're carrying and wearing.^^Use TALK TO <someone> to talk to another character in the game. Use ASK <someone> ABOUT <something> to ask them about something. Use GIVE <something> TO <someone> to give them an object you're carrying.^^Use AGAIN (or G) to repeat the last command.^^";
#Ifv5;
  print "Use UNDO to undo the last command if you make a mistake.^^";
#Endif;
  "Use SAVE to save the game and RESTORE to restore it again.^^Other common verbs include OPEN, CLOSE, EAT, READ and BUY. There are over 100 verbs that you can use, so if something doesn't work, try a different verb or a different way of doing things. Use HINT if you get stuck.^^For full instructions, see the game page at https://warrigal.itch.io/samurai-and-kappa.";
];

[ HintSub;
  "Make sure you examine everything you find and draw a map. Other than that, there's nothing else to do here.";
];

[ LockSub k;
  if (ObjectIsUntouchable(noun))
    return;
  if (noun hasnt lockable)
  {
    PrintMsg(MSG_LOCK_NOT_A_LOCK, 'lock');
    rtrue;
  }
  if (noun has locked)
  {
    PrintMsg(MSG_LOCK_ALREADY_LOCKED);
    rtrue;
  }
  if (noun has open)
  {
    PrintMsg(MSG_LOCK_CLOSE_FIRST);
    rtrue;
  }
  k = RunRoutines(noun, with_key);
  if (k == nothing)
    "You can't see how to lock ", (ItOrThem)noun, ".";
  if (second == nothing && k ~= nothing && k in player)
  {
    second = k;
    print "(with ", (the)second, ")^";
  }
  if (second == nothing)
    "You don't have the key.";
  if (second ~= k)
  {
    PrintMsg(MSG_LOCK_KEY_DOESNT_FIT);
    rtrue;
  }
  give noun locked;
  run_after_routines_msg = MSG_LOCK_DEFAULT;
  run_after_routines_arg_1 = 'lock';
];

[ LookUnderSub;
  if (location == thedark)
    "But it's dark.";
  "You find nothing of interest.";
];

[ MagicWordSub;
  "The shogun has banned the use of magic words.";
];

[ PaySub;
  "You don't need to pay ", (the)noun, " for anything.";
];

[ ReadSub;
  if (ObjectIsUntouchable(noun, true))
    "I suppose you read tea leaves, too";
  "There's nothing legible on ", (ThatOrThose)noun, ".";
];

[ SaySub i;
  if (consult_words == 0)
    "You have nothing to say.";
  print "~";
  i = consult_from;
  print (firstConsultWord)i++;
  while (i < consult_from + consult_words)
    print " ", (consultWord)i++;
  print ".~^^";
  wn = consult_from;
  if (consult_words == 1 && NextWord() == 'xyzzy' or 'plover' or 'plugh' or 'yoho')
    <<MagicWord>>;
  if (AfterRoutines())
    return;
  "Nothing happens.";
];

[ SlideSub;
  if (ObjectIsUntouchable(noun))
    return;
  "You can't slide ", (ThatOrThose)noun, ".";
];

[ TalkSub;
  if (noun == nothing)
    "You start talking to no one in particular.";
  if (noun == player)
    "You start talking to yourself, but it's a one-sided conversation.";
  if (RunLife(noun, ##Talk))
    rtrue;
  print_ret (The)noun, " ", (IsOrAre)noun, " not very talkative.";
];

[ ThankSub;
  if (ObjectIsUntouchable(noun))
    return;
  if (noun == player)
    "You start thanking yourself, then wonder what it is that you've done that's so worthy of thanking.";
  if (RunLife(noun, ##Thank))
    rtrue;
  if (noun has neuter)
    print_ret (The)noun, " gives you a strange look.";
  print_ret (The)noun, " says, ~You're welcome.~";
];

[ TutorialOffSub;
  if (~~tutorial)
    "Tutorial mode is already off.";
  tutorial = false;
  "Tutorial mode is now off.";
];

[ TutorialOnSub;
  if (tutorial)
    "Tutorial mode is already on.";
  tutorial = true;
  "Tutorial mode is now on.";
];

[ TutorialSub;
  print "Tutorial mode is currently ";
  if (tutorial)
    "on.";
  else
    "off.";
];

[ UnlockSub k;
  if (ObjectIsUntouchable(noun))
    return;
  if (noun hasnt lockable)
  {
    PrintMsg(MSG_UNLOCK_NOT_A_LOCK, 'unlock');
    rtrue;
  }
  if (noun hasnt locked)
  {
    PrintMsg(MSG_UNLOCK_ALREADY_UNLOCKED, 'unlock');
    rtrue;
  }
  k = RunRoutines(noun, with_key);
  if (k == nothing)
    "You can't see how to unlock ", (ItOrThem)noun, ".";
  if (second == nothing && k ~= nothing && k in player)
  {
    second = k;
    print "(with ", (the)second, ")^";
  }
  if (second == nothing)
    "You don't have the key.";
  if (second ~= k)
  {
    PrintMsg(MSG_UNLOCK_KEY_DOESNT_FIT);
    rtrue;
  }
  give noun ~locked;
  run_after_routines_msg = MSG_UNLOCK_DEFAULT;
  run_after_routines_arg_1 = 'unlock';
];

[ UseSub;
  if (ObjectIsUntouchable(noun))
    return;
  "You'll have to be more explicit than that.";
];

[ VagueAskSub;
  "You need to specify who to ask, e.g. ASK <somebody> ABOUT <something>.";
];

End;
